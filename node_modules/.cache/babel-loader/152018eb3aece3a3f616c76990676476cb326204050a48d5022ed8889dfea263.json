{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [validationResult, setValidationResult] = useState(null);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const [usedCardIds, setUsedCardIds] = useState([]);\n  const [toast, setToast] = useState({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState([]);\n  const [fadingCards, setFadingCards] = useState([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState([]);\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\n\n  // 보드 초기화\n  useEffect(() => {\n    const initialBoard = initializeBoard();\n    setBoard(initialBoard);\n\n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n\n    // 게임 시작 시 첫 번째 턴 결정 (랜덤)\n    setIsComputerTurn(Math.random() < 0.5);\n  }, []);\n\n  // 컴퓨터 턴 처리\n  useEffect(() => {\n    if (isComputerTurn && board.length > 0 && !fadingCards.length) {\n      // 컴퓨터 턴 시작 시 지연시간 설정 (1.5-3초)\n      const delay = 1500 + Math.random() * 1500;\n      const computerTurnTimeout = setTimeout(() => {\n        computerTurn();\n      }, delay);\n      return () => clearTimeout(computerTurnTimeout);\n    }\n  }, [isComputerTurn, board, fadingCards]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isComputerTurn) {\n      validateSelection();\n    }\n  }, [selectedCards, isComputerTurn]);\n\n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback(() => {\n    const boardCards = board.slice(0, 9);\n    const validCombinations = [];\n\n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    return validCombinations;\n  }, [board]);\n\n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (fadingCards.length > 0) return;\n    const validCombinations = findAllValidCombinations();\n    if (validCombinations.length > 0) {\n      // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n      const randomIndex = Math.floor(Math.random() * validCombinations.length);\n      const selectedCombination = validCombinations[randomIndex];\n\n      // 첫 번째 카드 선택\n      setComputerSelectedCards([selectedCombination[0]]);\n\n      // 두 번째 카드 선택 (0.6초 뒤)\n      setTimeout(() => {\n        setComputerSelectedCards(prev => [...prev, selectedCombination[1]]);\n\n        // 세 번째 카드 선택 (추가 0.6초 뒤)\n        setTimeout(() => {\n          setComputerSelectedCards(prev => [...prev, selectedCombination[2]]);\n        }, 600);\n      }, 600);\n    } else {\n      // 유효한 조합이 없을 경우 NO TEAM 선택\n      handleComputerNoTeam();\n    }\n  }, [board, fadingCards, findAllValidCombinations]);\n\n  // 컴퓨터의 NO TEAM 선택 처리\n  const handleComputerNoTeam = useCallback(() => {\n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n\n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n    // 페이드아웃 효과를 위해 모든 카드 ID 저장\n    setFadingCards(boardCardIds);\n\n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      const newBoard = initializeBoard([...usedCardIds, ...boardCardIds]);\n      setBoard(newBoard);\n      setFadingCards([]);\n      setComputerSelectedCards([]);\n      setIsComputerTurn(false);\n\n      // 개발 디버깅용: 중복 카드 체크\n      const newBoardIds = newBoard.map(card => card.id);\n      const uniqueIds = new Set(newBoardIds);\n      if (uniqueIds.size !== newBoardIds.length) {\n        console.error('컴퓨터 NO TEAM 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n      }\n    }, 600);\n  }, [board, usedCardIds]);\n\n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      const result = compareAttributes(computerSelectedCards);\n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setComputerScore(prevScore => prevScore + 1);\n\n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '컴퓨터가 조합을 찾았습니다! +1점'\n        });\n\n        // 사용된 카드 ID 추가\n        const selectedIds = computerSelectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setComputerSelectedCards([]);\n          // 턴 변경\n          setIsComputerTurn(false);\n\n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds]);\n  const handleCardSelect = card => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 선택 불가\n\n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setPlayerScore(prevScore => prevScore + 1);\n\n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n\n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setSelectedCards([]);\n          // 컴퓨터 턴으로 변경\n          setIsComputerTurn(true);\n          // 가능한 조합 초기화\n          setPossibleCombinations([]);\n\n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n\n        // 선택 초기화\n        setSelectedCards([]);\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 동작 불가\n\n    const validCombinations = findAllValidCombinations();\n    if (validCombinations.length === 0) {\n      // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n      setPlayerScore(prevScore => prevScore + 10);\n      setToast({\n        isVisible: true,\n        type: 'success',\n        message: '정확합니다! 가능한 조합이 없습니다. +10점'\n      });\n\n      // 모든 카드 새로고침\n      const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n      // 페이드아웃 효과를 위해 모든 카드 ID 저장\n      setFadingCards(boardCardIds);\n\n      // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n      setTimeout(() => {\n        const newBoard = initializeBoard([...usedCardIds, ...boardCardIds]);\n        setBoard(newBoard);\n        setFadingCards([]);\n        setSelectedCards([]);\n        setIsComputerTurn(true);\n\n        // 개발 디버깅용: 중복 카드 체크\n        const newBoardIds = newBoard.map(card => card.id);\n        const uniqueIds = new Set(newBoardIds);\n        if (uniqueIds.size !== newBoardIds.length) {\n          console.error('NO TEAM 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n        }\n      }, 600);\n    } else {\n      // 유효한 조합이 있는 경우 - 점수 감점 및 가능한 조합 표시\n      setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n      setToast({\n        isVisible: true,\n        type: 'error',\n        message: '가능한 조합이 있습니다! -5점'\n      });\n\n      // 첫 번째 가능한 조합을 표시\n      setPossibleCombinations(validCombinations);\n      // 선택 초기화\n      setSelectedCards([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRIO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-scores\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `player-score ${!isComputerTurn ? 'active' : ''}`,\n        children: [\"\\uD50C\\uB808\\uC774\\uC5B4: \", playerScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `computer-score ${isComputerTurn ? 'active' : ''}`,\n        children: [\"\\uCEF4\\uD4E8\\uD130: \", computerScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        selectedCards: selectedCards,\n        computerSelectedCards: computerSelectedCards,\n        possibleCombinations: possibleCombinations,\n        fadingCards: fadingCards,\n        isComputerTurn: isComputerTurn,\n        onCardClick: handleCardSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-team-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"no-team-btn\",\n          onClick: handleNoTeam,\n          disabled: isComputerTurn,\n          children: \"NO TEAM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      toast: toast,\n      setToast: setToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZLpyuIdACXLrXgFm95XSPJWWxOc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GameBoard","Toast","initializeBoard","compareAttributes","refreshBoard","jsxDEV","_jsxDEV","App","_s","board","setBoard","selectedCards","setSelectedCards","validationResult","setValidationResult","playerScore","setPlayerScore","computerScore","setComputerScore","usedCardIds","setUsedCardIds","toast","setToast","isVisible","type","message","possibleCombinations","setPossibleCombinations","fadingCards","setFadingCards","computerSelectedCards","setComputerSelectedCards","isComputerTurn","setIsComputerTurn","initialBoard","boardIds","map","card","id","uniqueIds","Set","size","length","console","error","Math","random","delay","computerTurnTimeout","setTimeout","computerTurn","clearTimeout","validateSelection","validateComputerSelection","findAllValidCombinations","boardCards","slice","validCombinations","i","j","k","combination","isValid","push","randomIndex","floor","selectedCombination","prev","handleComputerNoTeam","prevScore","boardCardIds","newBoard","newBoardIds","result","selectedIds","handleCardSelect","some","c","filter","handleNoTeam","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { Card, ValidationResult, ToastMessage } from './types/types';\n\nfunction App() {\n  const [board, setBoard] = useState<Card[]>([]);\n  const [selectedCards, setSelectedCards] = useState<Card[]>([]);\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [playerScore, setPlayerScore] = useState<number>(0);\n  const [computerScore, setComputerScore] = useState<number>(0);\n  const [usedCardIds, setUsedCardIds] = useState<number[]>([]);\n  const [toast, setToast] = useState<ToastMessage>({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState<Card[][]>([]);\n  const [fadingCards, setFadingCards] = useState<number[]>([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState<Card[]>([]);\n  const [isComputerTurn, setIsComputerTurn] = useState<boolean>(false);\n  \n  // 보드 초기화\n  useEffect(() => {\n    const initialBoard = initializeBoard();\n    setBoard(initialBoard);\n    \n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n    \n    // 게임 시작 시 첫 번째 턴 결정 (랜덤)\n    setIsComputerTurn(Math.random() < 0.5);\n  }, []);\n  \n  // 컴퓨터 턴 처리\n  useEffect(() => {\n    if (isComputerTurn && board.length > 0 && !fadingCards.length) {\n      // 컴퓨터 턴 시작 시 지연시간 설정 (1.5-3초)\n      const delay = 1500 + Math.random() * 1500;\n      \n      const computerTurnTimeout = setTimeout(() => {\n        computerTurn();\n      }, delay);\n      \n      return () => clearTimeout(computerTurnTimeout);\n    }\n  }, [isComputerTurn, board, fadingCards]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isComputerTurn) {\n      validateSelection();\n    }\n  }, [selectedCards, isComputerTurn]);\n  \n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback((): Card[][] => {\n    const boardCards = board.slice(0, 9);\n    const validCombinations: Card[][] = [];\n    \n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    \n    return validCombinations;\n  }, [board]);\n  \n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (fadingCards.length > 0) return;\n    \n    const validCombinations = findAllValidCombinations();\n    \n    if (validCombinations.length > 0) {\n      // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n      const randomIndex = Math.floor(Math.random() * validCombinations.length);\n      const selectedCombination = validCombinations[randomIndex];\n      \n      // 첫 번째 카드 선택\n      setComputerSelectedCards([selectedCombination[0]]);\n      \n      // 두 번째 카드 선택 (0.6초 뒤)\n      setTimeout(() => {\n        setComputerSelectedCards(prev => [...prev, selectedCombination[1]]);\n        \n        // 세 번째 카드 선택 (추가 0.6초 뒤)\n        setTimeout(() => {\n          setComputerSelectedCards(prev => [...prev, selectedCombination[2]]);\n        }, 600);\n      }, 600);\n    } else {\n      // 유효한 조합이 없을 경우 NO TEAM 선택\n      handleComputerNoTeam();\n    }\n  }, [board, fadingCards, findAllValidCombinations]);\n  \n  // 컴퓨터의 NO TEAM 선택 처리\n  const handleComputerNoTeam = useCallback(() => {\n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n    \n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n    \n    // 페이드아웃 효과를 위해 모든 카드 ID 저장\n    setFadingCards(boardCardIds);\n    \n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      const newBoard = initializeBoard([...usedCardIds, ...boardCardIds]);\n      setBoard(newBoard);\n      setFadingCards([]);\n      setComputerSelectedCards([]);\n      setIsComputerTurn(false);\n      \n      // 개발 디버깅용: 중복 카드 체크\n      const newBoardIds = newBoard.map(card => card.id);\n      const uniqueIds = new Set(newBoardIds);\n      if (uniqueIds.size !== newBoardIds.length) {\n        console.error('컴퓨터 NO TEAM 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n      }\n    }, 600);\n  }, [board, usedCardIds]);\n  \n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      const result = compareAttributes(computerSelectedCards);\n      \n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setComputerScore(prevScore => prevScore + 1);\n        \n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '컴퓨터가 조합을 찾았습니다! +1점'\n        });\n        \n        // 사용된 카드 ID 추가\n        const selectedIds = computerSelectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n        \n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setComputerSelectedCards([]);\n          // 턴 변경\n          setIsComputerTurn(false);\n          \n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds]);\n\n  const handleCardSelect = (card: Card) => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 선택 불가\n    \n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      \n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setPlayerScore(prevScore => prevScore + 1);\n        \n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n        \n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n        \n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setSelectedCards([]);\n          // 컴퓨터 턴으로 변경\n          setIsComputerTurn(true);\n          // 가능한 조합 초기화\n          setPossibleCombinations([]);\n          \n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n        \n        // 선택 초기화\n        setSelectedCards([]);\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 동작 불가\n    \n    const validCombinations = findAllValidCombinations();\n    \n    if (validCombinations.length === 0) {\n      // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n      setPlayerScore(prevScore => prevScore + 10);\n      setToast({\n        isVisible: true,\n        type: 'success',\n        message: '정확합니다! 가능한 조합이 없습니다. +10점'\n      });\n      \n      // 모든 카드 새로고침\n      const boardCardIds = board.slice(0, 9).map(card => card.id);\n      \n      // 페이드아웃 효과를 위해 모든 카드 ID 저장\n      setFadingCards(boardCardIds);\n      \n      // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n      setTimeout(() => {\n        const newBoard = initializeBoard([...usedCardIds, ...boardCardIds]);\n        setBoard(newBoard);\n        setFadingCards([]);\n        setSelectedCards([]);\n        setIsComputerTurn(true);\n        \n        // 개발 디버깅용: 중복 카드 체크\n        const newBoardIds = newBoard.map(card => card.id);\n        const uniqueIds = new Set(newBoardIds);\n        if (uniqueIds.size !== newBoardIds.length) {\n          console.error('NO TEAM 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n        }\n      }, 600);\n    } else {\n      // 유효한 조합이 있는 경우 - 점수 감점 및 가능한 조합 표시\n      setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n      setToast({\n        isVisible: true,\n        type: 'error',\n        message: '가능한 조합이 있습니다! -5점'\n      });\n      \n      // 첫 번째 가능한 조합을 표시\n      setPossibleCombinations(validCombinations);\n      // 선택 초기화\n      setSelectedCards([]);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>TRIO</h1>\n      <div className=\"game-scores\">\n        <div className={`player-score ${!isComputerTurn ? 'active' : ''}`}>\n          플레이어: {playerScore}\n        </div>\n        <div className={`computer-score ${isComputerTurn ? 'active' : ''}`}>\n          컴퓨터: {computerScore}\n        </div>\n      </div>\n      <div className=\"game-container\">\n        <GameBoard \n          board={board} \n          selectedCards={selectedCards}\n          computerSelectedCards={computerSelectedCards}\n          possibleCombinations={possibleCombinations}\n          fadingCards={fadingCards}\n          isComputerTurn={isComputerTurn}\n          onCardClick={handleCardSelect} \n        />\n        <div className=\"no-team-container\">\n          <button \n            className=\"no-team-btn\" \n            onClick={handleNoTeam}\n            disabled={isComputerTurn}\n          >\n            NO TEAM\n          </button>\n        </div>\n      </div>\n      <Toast toast={toast} setToast={setToast} />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}