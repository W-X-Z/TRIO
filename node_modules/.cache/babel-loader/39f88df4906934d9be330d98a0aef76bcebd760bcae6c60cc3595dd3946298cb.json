{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [validationResult, setValidationResult] = useState(null);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const [usedCardIds, setUsedCardIds] = useState([]);\n  const [toast, setToast] = useState({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState([]);\n  const [fadingCards, setFadingCards] = useState([]);\n  const [blackFadingCards, setBlackFadingCards] = useState([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState([]);\n  const [isComputerThinking, setIsComputerThinking] = useState(false);\n  const computerTimerRef = useRef(null);\n  const isProcessingRef = useRef(false);\n  const lastComputerMoveTimeRef = useRef(Date.now());\n\n  // 컴퓨터가 일정 시간 동안 움직이지 않으면 재시작시키는 기능\n  useEffect(() => {\n    const checkInactivity = () => {\n      const now = Date.now();\n      const timeSinceLastMove = now - lastComputerMoveTimeRef.current;\n\n      // 60초 이상 컴퓨터가 움직이지 않았을 경우 (이는 오류 상태로 간주)\n      if (isComputerThinking && timeSinceLastMove > 60000 && !isProcessingRef.current) {\n        console.log('컴퓨터가 오랫동안 응답이 없어 자동으로 재시작합니다.');\n        if (computerTimerRef.current) {\n          clearTimeout(computerTimerRef.current);\n          computerTimerRef.current = null;\n        }\n\n        // 컴퓨터 턴 재시작\n        scheduleComputerTurn();\n      }\n    };\n\n    // 10초마다 비활성 상태 확인\n    const inactivityTimer = setInterval(checkInactivity, 10000);\n    return () => {\n      clearInterval(inactivityTimer);\n    };\n  }, [isComputerThinking]);\n\n  // 보드 초기화\n  useEffect(() => {\n    startNewRound();\n\n    // 컴포넌트 언마운트 시 타이머 정리\n    return () => {\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n    };\n  }, []);\n\n  // 컴퓨터 턴 스케줄링 함수 (재사용 가능하도록 분리)\n  const scheduleComputerTurn = useCallback(() => {\n    setIsComputerThinking(true);\n    lastComputerMoveTimeRef.current = Date.now();\n\n    // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n    const computerDelay = 10000 + Math.random() * 10000;\n\n    // 이전 타이머가 있으면 정리\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n    }\n    computerTimerRef.current = setTimeout(() => {\n      if (!isProcessingRef.current) {\n        computerTurn();\n      } else {\n        // 처리 중이면 잠시 후 다시 시도\n        setTimeout(() => {\n          if (!isProcessingRef.current) {\n            computerTurn();\n          }\n        }, 2000);\n      }\n    }, computerDelay);\n  }, []);\n\n  // 새 라운드 시작 함수\n  const startNewRound = useCallback(() => {\n    // 이전 컴퓨터 타이머 초기화\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n\n    // 새로운 보드 초기화\n    const initialBoard = initializeBoard(usedCardIds);\n    setBoard(initialBoard);\n\n    // 선택 상태 초기화\n    setSelectedCards([]);\n    setComputerSelectedCards([]);\n    setPossibleCombinations([]);\n    setFadingCards([]);\n    setBlackFadingCards([]);\n    isProcessingRef.current = false;\n\n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n\n    // 컴퓨터 턴 스케줄링\n    scheduleComputerTurn();\n  }, [usedCardIds, scheduleComputerTurn]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isProcessingRef.current) {\n      validateSelection();\n    }\n  }, [selectedCards]);\n\n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3 && !isProcessingRef.current) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback(() => {\n    if (!board || board.length < 9) {\n      return [];\n    }\n    const boardCards = board.slice(0, 9);\n    const validCombinations = [];\n\n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    return validCombinations;\n  }, [board]);\n\n  // 컴퓨터의 NO TEAM 선택 처리\n  const handleComputerNoTeam = useCallback(() => {\n    if (isProcessingRef.current) return;\n    isProcessingRef.current = true;\n\n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n\n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n    // 페이드아웃 효과를 위해 모든 카드 ID 저장 (검은색 페이드아웃)\n    setBlackFadingCards(boardCardIds);\n\n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      try {\n        // 사용된 카드 ID 추가\n        setUsedCardIds(prev => [...prev, ...boardCardIds]);\n        setBlackFadingCards([]);\n\n        // 새 라운드 시작\n        startNewRound();\n      } catch (error) {\n        console.error('컴퓨터 NO TEAM 처리 중 오류 발생:', error);\n        // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n        isProcessingRef.current = false;\n        setBlackFadingCards([]);\n        startNewRound();\n      }\n    }, 1000);\n  }, [board, startNewRound]);\n\n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (isProcessingRef.current || fadingCards.length > 0 || blackFadingCards.length > 0) {\n      // 처리 중이므로 컴퓨터 턴 스킵하고 나중에 다시 시도\n      setTimeout(() => {\n        if (!isProcessingRef.current && !fadingCards.length && !blackFadingCards.length) {\n          computerTurn();\n        }\n      }, 2000);\n      return;\n    }\n\n    // 컴퓨터 움직임 시간 기록\n    lastComputerMoveTimeRef.current = Date.now();\n    try {\n      const validCombinations = findAllValidCombinations();\n      if (validCombinations.length > 0) {\n        // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n        const randomIndex = Math.floor(Math.random() * validCombinations.length);\n        const selectedCombination = validCombinations[randomIndex];\n\n        // 세 장의 카드를 한꺼번에 선택 (컴퓨터는 즉시 선택)\n        setComputerSelectedCards(selectedCombination);\n      } else {\n        // 유효한 조합이 없을 경우 NO TEAM 선택\n        handleComputerNoTeam();\n      }\n      setIsComputerThinking(false);\n    } catch (error) {\n      console.error('컴퓨터 턴 처리 중 오류 발생:', error);\n      // 오류 발생 시 처리 상태 초기화하고 다시 시도\n      isProcessingRef.current = false;\n      setIsComputerThinking(false);\n\n      // 3초 후에 다시 시도\n      setTimeout(() => {\n        scheduleComputerTurn();\n      }, 3000);\n    }\n  }, [board, fadingCards, blackFadingCards, findAllValidCombinations, handleComputerNoTeam, scheduleComputerTurn]);\n\n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      try {\n        const result = compareAttributes(computerSelectedCards);\n        if (result.isValid) {\n          // 유효한 조합일 경우\n          const selectedIds = computerSelectedCards.map(card => card.id);\n\n          // 검은색 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setBlackFadingCards(selectedIds);\n\n          // 약간의 지연 후 점수 추가 및 UI 갱신\n          setTimeout(() => {\n            setComputerScore(prevScore => prevScore + 1);\n\n            // 토스트 메시지 표시\n            setToast({\n              isVisible: true,\n              type: 'error',\n              message: '컴퓨터가 조합을 찾았습니다! +1점'\n            });\n\n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n            // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n            setTimeout(() => {\n              try {\n                // 선택된 카드 교체\n                const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n                setBoard(newBoard);\n                // 페이드아웃 효과 해제\n                setBlackFadingCards([]);\n                // 선택 초기화\n                setComputerSelectedCards([]);\n                setSelectedCards([]);\n                // 처리 상태 해제\n                isProcessingRef.current = false;\n\n                // 컴퓨터 다음 생각 시작 (10~20초)\n                scheduleComputerTurn();\n\n                // 개발 디버깅용: 중복 카드 체크\n                const newBoardIds = newBoard.map(card => card.id);\n                const uniqueIds = new Set(newBoardIds);\n                if (uniqueIds.size !== newBoardIds.length) {\n                  console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n                }\n              } catch (error) {\n                console.error('컴퓨터 선택 처리 완료 중 오류 발생:', error);\n                // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n                isProcessingRef.current = false;\n                setBlackFadingCards([]);\n                startNewRound();\n              }\n            }, 800);\n          }, 1000);\n        } else {\n          // 유효하지 않은 조합일 경우 (이 경우는 일어나지 않아야 함)\n          console.error('컴퓨터가 유효하지 않은 조합을 선택했습니다:', computerSelectedCards);\n          setComputerSelectedCards([]);\n          isProcessingRef.current = false;\n          scheduleComputerTurn();\n        }\n      } catch (error) {\n        console.error('컴퓨터 선택 검증 중 오류 발생:', error);\n        // 오류 발생 시 처리 상태 초기화하고 다시 시도\n        isProcessingRef.current = false;\n        setComputerSelectedCards([]);\n        scheduleComputerTurn();\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds, scheduleComputerTurn, startNewRound]);\n  const handleCardSelect = card => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 선택 불가\n\n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n\n      // 이전 컴퓨터 타이머 취소\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      try {\n        const result = compareAttributes(selectedCards);\n        setValidationResult(result);\n        if (result.isValid) {\n          // 유효한 조합일 경우\n          setPlayerScore(prevScore => prevScore + 1);\n\n          // 사용된 카드 ID 추가\n          const selectedIds = selectedCards.map(card => card.id);\n          setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n          // 토스트 메시지 표시\n          setToast({\n            isVisible: true,\n            type: 'success',\n            message: '유효한 조합입니다! +1점'\n          });\n\n          // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setFadingCards(selectedIds);\n\n          // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n          setTimeout(() => {\n            try {\n              // 선택된 카드 교체\n              const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n              setBoard(newBoard);\n              // 페이드아웃 효과 해제\n              setFadingCards([]);\n              // 선택 초기화\n              setSelectedCards([]);\n              setComputerSelectedCards([]);\n              // 처리 상태 해제\n              isProcessingRef.current = false;\n              // 가능한 조합 초기화\n              setPossibleCombinations([]);\n\n              // 컴퓨터 다음 생각 시작 (10~20초)\n              scheduleComputerTurn();\n\n              // 개발 디버깅용: 중복 카드 체크\n              const newBoardIds = newBoard.map(card => card.id);\n              const uniqueIds = new Set(newBoardIds);\n              if (uniqueIds.size !== newBoardIds.length) {\n                console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n              }\n            } catch (error) {\n              console.error('플레이어 선택 처리 완료 중 오류 발생:', error);\n              // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n              isProcessingRef.current = false;\n              setFadingCards([]);\n              startNewRound();\n            }\n          }, 600);\n        } else {\n          // 유효하지 않은 조합일 경우\n          setToast({\n            isVisible: true,\n            type: 'error',\n            message: '유효하지 않은 조합입니다.'\n          });\n\n          // 선택 초기화\n          setSelectedCards([]);\n          isProcessingRef.current = false;\n\n          // 컴퓨터 턴 다시 스케줄링\n          scheduleComputerTurn();\n        }\n      } catch (error) {\n        console.error('플레이어 선택 검증 중 오류 발생:', error);\n        // 오류 발생 시 처리 상태 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n        scheduleComputerTurn();\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 동작 불가\n    isProcessingRef.current = true;\n\n    // 이전 컴퓨터 타이머 취소\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    try {\n      const validCombinations = findAllValidCombinations();\n      if (validCombinations.length === 0) {\n        // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n        setPlayerScore(prevScore => prevScore + 10);\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '정확합니다! 가능한 조합이 없습니다. +10점'\n        });\n\n        // 모든 카드 새로고침\n        const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n        // 페이드아웃 효과를 위해 모든 카드 ID 저장\n        setFadingCards(boardCardIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          try {\n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...boardCardIds]);\n\n            // 새 라운드 시작\n            startNewRound();\n          } catch (error) {\n            console.error('NO TEAM 처리 완료 중 오류 발생:', error);\n            // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n            isProcessingRef.current = false;\n            setFadingCards([]);\n            startNewRound();\n          }\n        }, 600);\n      } else {\n        // 유효한 조합이 있는 경우 - 점수 감점\n        setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '가능한 조합이 있습니다! -5점'\n        });\n\n        // 선택 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n\n        // 컴퓨터 턴 다시 스케줄링\n        scheduleComputerTurn();\n      }\n    } catch (error) {\n      console.error('NO TEAM 버튼 처리 중 오류 발생:', error);\n      // 오류 발생 시 처리 상태 초기화\n      isProcessingRef.current = false;\n      scheduleComputerTurn();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRIO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-scores\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-score\",\n        children: [\"\\uD50C\\uB808\\uC774\\uC5B4: \", playerScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"computer-score\",\n        children: [\"\\uCEF4\\uD4E8\\uD130: \", computerScore, \" \", isComputerThinking && '🤔']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        selectedCards: selectedCards,\n        computerSelectedCards: computerSelectedCards,\n        possibleCombinations: [],\n        fadingCards: fadingCards,\n        blackFadingCards: blackFadingCards,\n        isComputerThinking: isComputerThinking,\n        onCardClick: handleCardSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-team-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"no-team-btn\",\n          onClick: handleNoTeam,\n          disabled: fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current,\n          children: \"\\uC870\\uD569 \\uC5C6\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      toast: toast,\n      setToast: setToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 500,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"och1IjbDfnmKmuRhfh0zSHbOx1k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","GameBoard","Toast","initializeBoard","compareAttributes","refreshBoard","jsxDEV","_jsxDEV","App","_s","board","setBoard","selectedCards","setSelectedCards","validationResult","setValidationResult","playerScore","setPlayerScore","computerScore","setComputerScore","usedCardIds","setUsedCardIds","toast","setToast","isVisible","type","message","possibleCombinations","setPossibleCombinations","fadingCards","setFadingCards","blackFadingCards","setBlackFadingCards","computerSelectedCards","setComputerSelectedCards","isComputerThinking","setIsComputerThinking","computerTimerRef","isProcessingRef","lastComputerMoveTimeRef","Date","now","checkInactivity","timeSinceLastMove","current","console","log","clearTimeout","scheduleComputerTurn","inactivityTimer","setInterval","clearInterval","startNewRound","computerDelay","Math","random","setTimeout","computerTurn","initialBoard","boardIds","map","card","id","uniqueIds","Set","size","length","error","validateSelection","validateComputerSelection","findAllValidCombinations","boardCards","slice","validCombinations","i","j","k","combination","isValid","push","handleComputerNoTeam","prevScore","boardCardIds","prev","randomIndex","floor","selectedCombination","result","selectedIds","newBoard","newBoardIds","handleCardSelect","some","c","filter","handleNoTeam","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { Card, ValidationResult, ToastMessage } from './types/types';\n\nfunction App() {\n  const [board, setBoard] = useState<Card[]>([]);\n  const [selectedCards, setSelectedCards] = useState<Card[]>([]);\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [playerScore, setPlayerScore] = useState<number>(0);\n  const [computerScore, setComputerScore] = useState<number>(0);\n  const [usedCardIds, setUsedCardIds] = useState<number[]>([]);\n  const [toast, setToast] = useState<ToastMessage>({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState<Card[][]>([]);\n  const [fadingCards, setFadingCards] = useState<number[]>([]);\n  const [blackFadingCards, setBlackFadingCards] = useState<number[]>([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState<Card[]>([]);\n  const [isComputerThinking, setIsComputerThinking] = useState<boolean>(false);\n  const computerTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const isProcessingRef = useRef<boolean>(false);\n  const lastComputerMoveTimeRef = useRef<number>(Date.now());\n  \n  // 컴퓨터가 일정 시간 동안 움직이지 않으면 재시작시키는 기능\n  useEffect(() => {\n    const checkInactivity = () => {\n      const now = Date.now();\n      const timeSinceLastMove = now - lastComputerMoveTimeRef.current;\n      \n      // 60초 이상 컴퓨터가 움직이지 않았을 경우 (이는 오류 상태로 간주)\n      if (isComputerThinking && timeSinceLastMove > 60000 && !isProcessingRef.current) {\n        console.log('컴퓨터가 오랫동안 응답이 없어 자동으로 재시작합니다.');\n        if (computerTimerRef.current) {\n          clearTimeout(computerTimerRef.current);\n          computerTimerRef.current = null;\n        }\n        \n        // 컴퓨터 턴 재시작\n        scheduleComputerTurn();\n      }\n    };\n    \n    // 10초마다 비활성 상태 확인\n    const inactivityTimer = setInterval(checkInactivity, 10000);\n    \n    return () => {\n      clearInterval(inactivityTimer);\n    };\n  }, [isComputerThinking]);\n  \n  // 보드 초기화\n  useEffect(() => {\n    startNewRound();\n    \n    // 컴포넌트 언마운트 시 타이머 정리\n    return () => {\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n    };\n  }, []);\n  \n  // 컴퓨터 턴 스케줄링 함수 (재사용 가능하도록 분리)\n  const scheduleComputerTurn = useCallback(() => {\n    setIsComputerThinking(true);\n    lastComputerMoveTimeRef.current = Date.now();\n    \n    // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n    const computerDelay = 10000 + Math.random() * 10000;\n    \n    // 이전 타이머가 있으면 정리\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n    }\n    \n    computerTimerRef.current = setTimeout(() => {\n      if (!isProcessingRef.current) {\n        computerTurn();\n      } else {\n        // 처리 중이면 잠시 후 다시 시도\n        setTimeout(() => {\n          if (!isProcessingRef.current) {\n            computerTurn();\n          }\n        }, 2000);\n      }\n    }, computerDelay);\n  }, []);\n  \n  // 새 라운드 시작 함수\n  const startNewRound = useCallback(() => {\n    // 이전 컴퓨터 타이머 초기화\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    \n    // 새로운 보드 초기화\n    const initialBoard = initializeBoard(usedCardIds);\n    setBoard(initialBoard);\n    \n    // 선택 상태 초기화\n    setSelectedCards([]);\n    setComputerSelectedCards([]);\n    setPossibleCombinations([]);\n    setFadingCards([]);\n    setBlackFadingCards([]);\n    isProcessingRef.current = false;\n    \n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n    \n    // 컴퓨터 턴 스케줄링\n    scheduleComputerTurn();\n  }, [usedCardIds, scheduleComputerTurn]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isProcessingRef.current) {\n      validateSelection();\n    }\n  }, [selectedCards]);\n  \n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3 && !isProcessingRef.current) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback((): Card[][] => {\n    if (!board || board.length < 9) {\n      return [];\n    }\n    \n    const boardCards = board.slice(0, 9);\n    const validCombinations: Card[][] = [];\n    \n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    \n    return validCombinations;\n  }, [board]);\n  \n  // 컴퓨터의 NO TEAM 선택 처리\n  const handleComputerNoTeam = useCallback(() => {\n    if (isProcessingRef.current) return;\n    isProcessingRef.current = true;\n    \n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n    \n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n    \n    // 페이드아웃 효과를 위해 모든 카드 ID 저장 (검은색 페이드아웃)\n    setBlackFadingCards(boardCardIds);\n    \n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      try {\n        // 사용된 카드 ID 추가\n        setUsedCardIds(prev => [...prev, ...boardCardIds]);\n        setBlackFadingCards([]);\n        \n        // 새 라운드 시작\n        startNewRound();\n      } catch (error) {\n        console.error('컴퓨터 NO TEAM 처리 중 오류 발생:', error);\n        // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n        isProcessingRef.current = false;\n        setBlackFadingCards([]);\n        startNewRound();\n      }\n    }, 1000);\n  }, [board, startNewRound]);\n  \n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (isProcessingRef.current || fadingCards.length > 0 || blackFadingCards.length > 0) {\n      // 처리 중이므로 컴퓨터 턴 스킵하고 나중에 다시 시도\n      setTimeout(() => {\n        if (!isProcessingRef.current && !fadingCards.length && !blackFadingCards.length) {\n          computerTurn();\n        }\n      }, 2000);\n      return;\n    }\n    \n    // 컴퓨터 움직임 시간 기록\n    lastComputerMoveTimeRef.current = Date.now();\n    \n    try {\n      const validCombinations = findAllValidCombinations();\n      \n      if (validCombinations.length > 0) {\n        // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n        const randomIndex = Math.floor(Math.random() * validCombinations.length);\n        const selectedCombination = validCombinations[randomIndex];\n        \n        // 세 장의 카드를 한꺼번에 선택 (컴퓨터는 즉시 선택)\n        setComputerSelectedCards(selectedCombination);\n      } else {\n        // 유효한 조합이 없을 경우 NO TEAM 선택\n        handleComputerNoTeam();\n      }\n      \n      setIsComputerThinking(false);\n    } catch (error) {\n      console.error('컴퓨터 턴 처리 중 오류 발생:', error);\n      // 오류 발생 시 처리 상태 초기화하고 다시 시도\n      isProcessingRef.current = false;\n      setIsComputerThinking(false);\n      \n      // 3초 후에 다시 시도\n      setTimeout(() => {\n        scheduleComputerTurn();\n      }, 3000);\n    }\n  }, [board, fadingCards, blackFadingCards, findAllValidCombinations, handleComputerNoTeam, scheduleComputerTurn]);\n  \n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      \n      try {\n        const result = compareAttributes(computerSelectedCards);\n        \n        if (result.isValid) {\n          // 유효한 조합일 경우\n          const selectedIds = computerSelectedCards.map(card => card.id);\n          \n          // 검은색 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setBlackFadingCards(selectedIds);\n          \n          // 약간의 지연 후 점수 추가 및 UI 갱신\n          setTimeout(() => {\n            setComputerScore(prevScore => prevScore + 1);\n            \n            // 토스트 메시지 표시\n            setToast({\n              isVisible: true,\n              type: 'error',\n              message: '컴퓨터가 조합을 찾았습니다! +1점'\n            });\n            \n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...selectedIds]);\n            \n            // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n            setTimeout(() => {\n              try {\n                // 선택된 카드 교체\n                const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n                setBoard(newBoard);\n                // 페이드아웃 효과 해제\n                setBlackFadingCards([]);\n                // 선택 초기화\n                setComputerSelectedCards([]);\n                setSelectedCards([]);\n                // 처리 상태 해제\n                isProcessingRef.current = false;\n                \n                // 컴퓨터 다음 생각 시작 (10~20초)\n                scheduleComputerTurn();\n                \n                // 개발 디버깅용: 중복 카드 체크\n                const newBoardIds = newBoard.map(card => card.id);\n                const uniqueIds = new Set(newBoardIds);\n                if (uniqueIds.size !== newBoardIds.length) {\n                  console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n                }\n              } catch (error) {\n                console.error('컴퓨터 선택 처리 완료 중 오류 발생:', error);\n                // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n                isProcessingRef.current = false;\n                setBlackFadingCards([]);\n                startNewRound();\n              }\n            }, 800);\n          }, 1000);\n        } else {\n          // 유효하지 않은 조합일 경우 (이 경우는 일어나지 않아야 함)\n          console.error('컴퓨터가 유효하지 않은 조합을 선택했습니다:', computerSelectedCards);\n          setComputerSelectedCards([]);\n          isProcessingRef.current = false;\n          scheduleComputerTurn();\n        }\n      } catch (error) {\n        console.error('컴퓨터 선택 검증 중 오류 발생:', error);\n        // 오류 발생 시 처리 상태 초기화하고 다시 시도\n        isProcessingRef.current = false;\n        setComputerSelectedCards([]);\n        scheduleComputerTurn();\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds, scheduleComputerTurn, startNewRound]);\n\n  const handleCardSelect = (card: Card) => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 선택 불가\n    \n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      \n      // 이전 컴퓨터 타이머 취소\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      \n      try {\n        const result = compareAttributes(selectedCards);\n        setValidationResult(result);\n        \n        if (result.isValid) {\n          // 유효한 조합일 경우\n          setPlayerScore(prevScore => prevScore + 1);\n          \n          // 사용된 카드 ID 추가\n          const selectedIds = selectedCards.map(card => card.id);\n          setUsedCardIds(prev => [...prev, ...selectedIds]);\n          \n          // 토스트 메시지 표시\n          setToast({\n            isVisible: true,\n            type: 'success',\n            message: '유효한 조합입니다! +1점'\n          });\n          \n          // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setFadingCards(selectedIds);\n          \n          // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n          setTimeout(() => {\n            try {\n              // 선택된 카드 교체\n              const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n              setBoard(newBoard);\n              // 페이드아웃 효과 해제\n              setFadingCards([]);\n              // 선택 초기화\n              setSelectedCards([]);\n              setComputerSelectedCards([]);\n              // 처리 상태 해제\n              isProcessingRef.current = false;\n              // 가능한 조합 초기화\n              setPossibleCombinations([]);\n              \n              // 컴퓨터 다음 생각 시작 (10~20초)\n              scheduleComputerTurn();\n              \n              // 개발 디버깅용: 중복 카드 체크\n              const newBoardIds = newBoard.map(card => card.id);\n              const uniqueIds = new Set(newBoardIds);\n              if (uniqueIds.size !== newBoardIds.length) {\n                console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n              }\n            } catch (error) {\n              console.error('플레이어 선택 처리 완료 중 오류 발생:', error);\n              // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n              isProcessingRef.current = false;\n              setFadingCards([]);\n              startNewRound();\n            }\n          }, 600);\n        } else {\n          // 유효하지 않은 조합일 경우\n          setToast({\n            isVisible: true,\n            type: 'error',\n            message: '유효하지 않은 조합입니다.'\n          });\n          \n          // 선택 초기화\n          setSelectedCards([]);\n          isProcessingRef.current = false;\n          \n          // 컴퓨터 턴 다시 스케줄링\n          scheduleComputerTurn();\n        }\n      } catch (error) {\n        console.error('플레이어 선택 검증 중 오류 발생:', error);\n        // 오류 발생 시 처리 상태 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n        scheduleComputerTurn();\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 동작 불가\n    isProcessingRef.current = true;\n    \n    // 이전 컴퓨터 타이머 취소\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    \n    try {\n      const validCombinations = findAllValidCombinations();\n      \n      if (validCombinations.length === 0) {\n        // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n        setPlayerScore(prevScore => prevScore + 10);\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '정확합니다! 가능한 조합이 없습니다. +10점'\n        });\n        \n        // 모든 카드 새로고침\n        const boardCardIds = board.slice(0, 9).map(card => card.id);\n        \n        // 페이드아웃 효과를 위해 모든 카드 ID 저장\n        setFadingCards(boardCardIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          try {\n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...boardCardIds]);\n            \n            // 새 라운드 시작\n            startNewRound();\n          } catch (error) {\n            console.error('NO TEAM 처리 완료 중 오류 발생:', error);\n            // 오류 발생 시 처리 상태 초기화하고 새 라운드 시작\n            isProcessingRef.current = false;\n            setFadingCards([]);\n            startNewRound();\n          }\n        }, 600);\n      } else {\n        // 유효한 조합이 있는 경우 - 점수 감점\n        setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '가능한 조합이 있습니다! -5점'\n        });\n        \n        // 선택 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n        \n        // 컴퓨터 턴 다시 스케줄링\n        scheduleComputerTurn();\n      }\n    } catch (error) {\n      console.error('NO TEAM 버튼 처리 중 오류 발생:', error);\n      // 오류 발생 시 처리 상태 초기화\n      isProcessingRef.current = false;\n      scheduleComputerTurn();\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>TRIO</h1>\n      <div className=\"game-scores\">\n        <div className=\"player-score\">\n          플레이어: {playerScore}\n        </div>\n        <div className=\"computer-score\">\n          컴퓨터: {computerScore} {isComputerThinking && '🤔'}\n        </div>\n      </div>\n      <div className=\"game-container\">\n        <GameBoard \n          board={board}\n          selectedCards={selectedCards}\n          computerSelectedCards={computerSelectedCards}\n          possibleCombinations={[]}\n          fadingCards={fadingCards}\n          blackFadingCards={blackFadingCards}\n          isComputerThinking={isComputerThinking}\n          onCardClick={handleCardSelect}\n        />\n        <div className=\"no-team-container\">\n          <button\n            className=\"no-team-btn\"\n            onClick={handleNoTeam}\n            disabled={fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current}\n          >\n            조합 없음\n          </button>\n        </div>\n      </div>\n      <Toast toast={toast} setToast={setToast} />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}