{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/components/GameBoard.tsx\";\nimport React from 'react';\nimport './GameBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  board,\n  selectedCards,\n  possibleCombinations,\n  fadingCards,\n  onCardClick\n}) => {\n  // 3x3 보드에 필요한 9개 카드만 사용\n  const boardCards = board.slice(0, 9);\n\n  // 종족, 직업, 성향 한글 변환 함수\n  const getRaceText = race => {\n    const raceMap = {\n      'human': '인간',\n      'elf': '엘프',\n      'dwarf': '드워프'\n    };\n    return raceMap[race];\n  };\n  const getJobText = job => {\n    const jobMap = {\n      'warrior': '전사',\n      'mage': '마법사',\n      'archer': '궁수'\n    };\n    return jobMap[job];\n  };\n  const getAlignmentText = alignment => {\n    const alignmentMap = {\n      'cold': '냉철',\n      'order': '정렬',\n      'chaos': '혼돈'\n    };\n    return alignmentMap[alignment];\n  };\n\n  // 카드가 가능한 조합에 속하는지 확인\n  const isCardInPossibleCombination = card => {\n    if (possibleCombinations.length === 0) return false;\n\n    // 첫 번째 가능한 조합에서만 체크\n    return possibleCombinations[0].some(c => c.id === card.id);\n  };\n\n  // 카드가 페이드아웃 중인지 확인\n  const isCardFading = card => {\n    return fadingCards.includes(card.id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: boardCards.map(card => {\n      const isSelected = selectedCards.some(c => c.id === card.id);\n      const isPossible = isCardInPossibleCombination(card);\n      const isFading = isCardFading(card);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${isSelected ? 'selected' : ''} ${isPossible ? 'possible' : ''} ${isFading ? 'fading' : ''}`,\n        onClick: () => onCardClick(card),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.imagePath,\n          alt: `${card.race} ${card.job} (${card.alignment})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-info\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-summary\",\n            children: `${getRaceText(card.race)} ${getJobText(card.job)} (${getAlignmentText(card.alignment)})`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GameBoard","board","selectedCards","possibleCombinations","fadingCards","onCardClick","boardCards","slice","getRaceText","race","raceMap","getJobText","job","jobMap","getAlignmentText","alignment","alignmentMap","isCardInPossibleCombination","card","length","some","c","id","isCardFading","includes","className","children","map","isSelected","isPossible","isFading","onClick","src","imagePath","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/components/GameBoard.tsx"],"sourcesContent":["import React from 'react';\nimport { Card } from '../types/types';\nimport './GameBoard.css';\n\ninterface GameBoardProps {\n  board: Card[];\n  selectedCards: Card[];\n  possibleCombinations: Card[][];\n  fadingCards: number[];\n  onCardClick: (card: Card) => void;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({ \n  board, \n  selectedCards, \n  possibleCombinations,\n  fadingCards,\n  onCardClick \n}) => {\n  // 3x3 보드에 필요한 9개 카드만 사용\n  const boardCards = board.slice(0, 9);\n  \n  // 종족, 직업, 성향 한글 변환 함수\n  const getRaceText = (race: Card['race']): string => {\n    const raceMap: Record<Card['race'], string> = {\n      'human': '인간',\n      'elf': '엘프',\n      'dwarf': '드워프'\n    };\n    return raceMap[race];\n  };\n\n  const getJobText = (job: Card['job']): string => {\n    const jobMap: Record<Card['job'], string> = {\n      'warrior': '전사',\n      'mage': '마법사',\n      'archer': '궁수'\n    };\n    return jobMap[job];\n  };\n\n  const getAlignmentText = (alignment: Card['alignment']): string => {\n    const alignmentMap: Record<Card['alignment'], string> = {\n      'cold': '냉철',\n      'order': '정렬',\n      'chaos': '혼돈'\n    };\n    return alignmentMap[alignment];\n  };\n  \n  // 카드가 가능한 조합에 속하는지 확인\n  const isCardInPossibleCombination = (card: Card): boolean => {\n    if (possibleCombinations.length === 0) return false;\n    \n    // 첫 번째 가능한 조합에서만 체크\n    return possibleCombinations[0].some(c => c.id === card.id);\n  };\n  \n  // 카드가 페이드아웃 중인지 확인\n  const isCardFading = (card: Card): boolean => {\n    return fadingCards.includes(card.id);\n  };\n  \n  return (\n    <div className=\"game-board\">\n      {boardCards.map((card) => {\n        const isSelected = selectedCards.some(c => c.id === card.id);\n        const isPossible = isCardInPossibleCombination(card);\n        const isFading = isCardFading(card);\n        \n        return (\n          <div \n            key={card.id} \n            className={`card ${isSelected ? 'selected' : ''} ${isPossible ? 'possible' : ''} ${isFading ? 'fading' : ''}`}\n            onClick={() => onCardClick(card)}\n          >\n            <img \n              src={card.imagePath} \n              alt={`${card.race} ${card.job} (${card.alignment})`} \n            />\n            <div className=\"card-info\">\n              <div className=\"card-summary\">\n                {`${getRaceText(card.race)} ${getJobText(card.job)} (${getAlignmentText(card.alignment)})`}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default GameBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}