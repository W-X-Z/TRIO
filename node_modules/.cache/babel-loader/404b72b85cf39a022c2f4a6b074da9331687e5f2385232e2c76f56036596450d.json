{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [validationResult, setValidationResult] = useState(null);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const [usedCardIds, setUsedCardIds] = useState([]);\n  const [toast, setToast] = useState({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState([]);\n  const [fadingCards, setFadingCards] = useState([]);\n  const [blackFadingCards, setBlackFadingCards] = useState([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState([]);\n  const [isComputerThinking, setIsComputerThinking] = useState(false);\n  const computerTimerRef = useRef(null);\n  const watchdogTimerRef = useRef(null);\n  const isProcessingRef = useRef(false);\n  const lastComputerMoveTimeRef = useRef(Date.now());\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback(() => {\n    if (!board || board.length < 9) {\n      return [];\n    }\n    const boardCards = board.slice(0, 9);\n    const validCombinations = [];\n\n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    return validCombinations;\n  }, [board]);\n\n  // 컴퓨터 턴 시작 함수\n  const startComputerTurn = useCallback(() => {\n    // 이미 처리 중이거나 페이드아웃 중이면 스킵\n    if (isProcessingRef.current || fadingCards.length > 0 || blackFadingCards.length > 0) {\n      return false;\n    }\n    setIsComputerThinking(true);\n    lastComputerMoveTimeRef.current = Date.now();\n\n    // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n    const computerDelay = 10000 + Math.random() * 10000;\n\n    // 이전 타이머가 있으면 정리\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    computerTimerRef.current = setTimeout(() => {\n      // 컴퓨터 턴 실행\n      executeComputerTurn();\n    }, computerDelay);\n    return true;\n  }, [fadingCards.length, blackFadingCards.length]);\n\n  // 컴퓨터 턴 실행 함수\n  const executeComputerTurn = useCallback(() => {\n    // 상태 확인\n    if (isProcessingRef.current || fadingCards.length > 0 || blackFadingCards.length > 0) {\n      // 2초 후 다시 시도\n      setTimeout(() => {\n        if (!isProcessingRef.current && fadingCards.length === 0 && blackFadingCards.length === 0) {\n          executeComputerTurn();\n        }\n      }, 2000);\n      return;\n    }\n    try {\n      // 컴퓨터 실행 시간 기록\n      lastComputerMoveTimeRef.current = Date.now();\n      const validCombinations = findAllValidCombinations();\n      if (validCombinations.length > 0) {\n        // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n        const randomIndex = Math.floor(Math.random() * validCombinations.length);\n        const selectedCombination = validCombinations[randomIndex];\n\n        // 세 장의 카드를 한꺼번에 선택 (컴퓨터는 즉시 선택)\n        setComputerSelectedCards(selectedCombination);\n      } else {\n        // 유효한 조합이 없을 경우 NO TEAM 선택\n        executeComputerNoTeam();\n      }\n      setIsComputerThinking(false);\n    } catch (error) {\n      console.error('컴퓨터 턴 처리 중 오류 발생:', error);\n      // 오류 복구\n      isProcessingRef.current = false;\n      setIsComputerThinking(false);\n\n      // 3초 후에 다시 시작\n      setTimeout(startComputerTurn, 3000);\n    }\n  }, [findAllValidCombinations, fadingCards, blackFadingCards]);\n\n  // 컴퓨터 NO TEAM 실행 함수\n  const executeComputerNoTeam = useCallback(() => {\n    if (isProcessingRef.current) return;\n    isProcessingRef.current = true;\n\n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n\n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n    // 페이드아웃 효과를 위해 모든 카드 ID 저장 (검은색 페이드아웃)\n    setBlackFadingCards(boardCardIds);\n\n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      try {\n        // 사용된 카드 ID 추가\n        setUsedCardIds(prev => [...prev, ...boardCardIds]);\n        setBlackFadingCards([]);\n\n        // 새 라운드 시작\n        startNewRound();\n      } catch (error) {\n        console.error('컴퓨터 NO TEAM 처리 중 오류 발생:', error);\n        // 오류 복구\n        isProcessingRef.current = false;\n        setBlackFadingCards([]);\n        startNewRound();\n      }\n    }, 1000);\n  }, [board]);\n\n  // 새 라운드 시작 함수\n  const startNewRound = useCallback(() => {\n    // 이전 타이머들 초기화\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n\n    // 새로운 보드 초기화\n    const initialBoard = initializeBoard(usedCardIds);\n    setBoard(initialBoard);\n\n    // 선택 상태 초기화\n    setSelectedCards([]);\n    setComputerSelectedCards([]);\n    setPossibleCombinations([]);\n    setFadingCards([]);\n    setBlackFadingCards([]);\n    isProcessingRef.current = false;\n\n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n\n    // 컴퓨터 턴 시작 - 직접 호출\n    setTimeout(() => {\n      if (!isProcessingRef.current) {\n        setIsComputerThinking(true);\n        lastComputerMoveTimeRef.current = Date.now();\n\n        // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n        const computerDelay = 10000 + Math.random() * 10000;\n        computerTimerRef.current = setTimeout(executeComputerTurn, computerDelay);\n      }\n    }, 100);\n  }, [usedCardIds]);\n\n  // 컴퓨터 선택 카드 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      try {\n        const result = compareAttributes(computerSelectedCards);\n        if (result.isValid) {\n          // 유효한 조합일 경우\n          const selectedIds = computerSelectedCards.map(card => card.id);\n\n          // 검은색 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setBlackFadingCards(selectedIds);\n\n          // 약간의 지연 후 점수 추가 및 UI 갱신\n          setTimeout(() => {\n            setComputerScore(prevScore => prevScore + 1);\n\n            // 토스트 메시지 표시\n            setToast({\n              isVisible: true,\n              type: 'error',\n              message: '컴퓨터가 조합을 찾았습니다! +1점'\n            });\n\n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n            // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n            setTimeout(() => {\n              try {\n                // 선택된 카드 교체\n                const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n                setBoard(newBoard);\n                // 페이드아웃 효과 해제\n                setBlackFadingCards([]);\n                // 선택 초기화\n                setComputerSelectedCards([]);\n                setSelectedCards([]);\n                // 처리 상태 해제\n                isProcessingRef.current = false;\n\n                // 컴퓨터 다음 생각 시작\n                startComputerTurn();\n\n                // 개발 디버깅용: 중복 카드 체크\n                const newBoardIds = newBoard.map(card => card.id);\n                const uniqueIds = new Set(newBoardIds);\n                if (uniqueIds.size !== newBoardIds.length) {\n                  console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n                }\n              } catch (error) {\n                console.error('컴퓨터 선택 처리 완료 중 오류 발생:', error);\n                // 오류 복구\n                isProcessingRef.current = false;\n                setBlackFadingCards([]);\n                startNewRound();\n              }\n            }, 800);\n          }, 1000);\n        } else {\n          // 유효하지 않은 조합일 경우 (이 경우는 일어나지 않아야 함)\n          console.error('컴퓨터가 유효하지 않은 조합을 선택했습니다:', computerSelectedCards);\n          setComputerSelectedCards([]);\n          isProcessingRef.current = false;\n          startComputerTurn();\n        }\n      } catch (error) {\n        console.error('컴퓨터 선택 검증 중 오류 발생:', error);\n        // 오류 복구\n        isProcessingRef.current = false;\n        setComputerSelectedCards([]);\n        startComputerTurn();\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds, startComputerTurn]);\n\n  // 카드 선택 핸들러\n  const handleCardSelect = useCallback(card => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 선택 불가\n\n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  }, [selectedCards, fadingCards, blackFadingCards, isProcessingRef]);\n\n  // 플레이어 선택 검증\n  const validateSelection = useCallback(() => {\n    if (selectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n\n      // 이전 컴퓨터 타이머 취소\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      try {\n        const result = compareAttributes(selectedCards);\n        setValidationResult(result);\n        if (result.isValid) {\n          // 유효한 조합일 경우\n          setPlayerScore(prevScore => prevScore + 1);\n\n          // 사용된 카드 ID 추가\n          const selectedIds = selectedCards.map(card => card.id);\n          setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n          // 토스트 메시지 표시\n          setToast({\n            isVisible: true,\n            type: 'success',\n            message: '유효한 조합입니다! +1점'\n          });\n\n          // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setFadingCards(selectedIds);\n\n          // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n          setTimeout(() => {\n            try {\n              // 선택된 카드 교체\n              const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n              setBoard(newBoard);\n              // 페이드아웃 효과 해제\n              setFadingCards([]);\n              // 선택 초기화\n              setSelectedCards([]);\n              setComputerSelectedCards([]);\n              // 처리 상태 해제\n              isProcessingRef.current = false;\n              // 가능한 조합 초기화\n              setPossibleCombinations([]);\n\n              // 컴퓨터 다음 생각 시작\n              startComputerTurn();\n\n              // 개발 디버깅용: 중복 카드 체크\n              const newBoardIds = newBoard.map(card => card.id);\n              const uniqueIds = new Set(newBoardIds);\n              if (uniqueIds.size !== newBoardIds.length) {\n                console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n              }\n            } catch (error) {\n              console.error('플레이어 선택 처리 완료 중 오류 발생:', error);\n              // 오류 복구\n              isProcessingRef.current = false;\n              setFadingCards([]);\n              startNewRound();\n            }\n          }, 600);\n        } else {\n          // 유효하지 않은 조합일 경우\n          setToast({\n            isVisible: true,\n            type: 'error',\n            message: '유효하지 않은 조합입니다.'\n          });\n\n          // 선택 초기화\n          setSelectedCards([]);\n          isProcessingRef.current = false;\n\n          // 컴퓨터 턴 다시 시작\n          startComputerTurn();\n        }\n      } catch (error) {\n        console.error('플레이어 선택 검증 중 오류 발생:', error);\n        // 오류 복구\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n        startComputerTurn();\n      }\n    }\n  }, [selectedCards, board, usedCardIds, startComputerTurn]);\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = useCallback(() => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 동작 불가\n    isProcessingRef.current = true;\n\n    // 이전 컴퓨터 타이머 취소\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    try {\n      const validCombinations = findAllValidCombinations();\n      if (validCombinations.length === 0) {\n        // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n        setPlayerScore(prevScore => prevScore + 10);\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '정확합니다! 가능한 조합이 없습니다. +10점'\n        });\n\n        // 모든 카드 새로고침\n        const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n        // 페이드아웃 효과를 위해 모든 카드 ID 저장\n        setFadingCards(boardCardIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          try {\n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...boardCardIds]);\n\n            // 새 라운드 시작\n            startNewRound();\n          } catch (error) {\n            console.error('NO TEAM 처리 완료 중 오류 발생:', error);\n            // 오류 복구\n            isProcessingRef.current = false;\n            setFadingCards([]);\n            startNewRound();\n          }\n        }, 600);\n      } else {\n        // 유효한 조합이 있는 경우 - 점수 감점\n        setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '가능한 조합이 있습니다! -5점'\n        });\n\n        // 선택 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n\n        // 컴퓨터 턴 다시 시작\n        startComputerTurn();\n      }\n    } catch (error) {\n      console.error('NO TEAM 버튼 처리 중 오류 발생:', error);\n      // 오류 복구\n      isProcessingRef.current = false;\n      startComputerTurn();\n    }\n  }, [fadingCards, blackFadingCards, findAllValidCombinations, board, startNewRound, startComputerTurn]);\n\n  // 컴퓨터가 일정 시간 동안 움직이지 않으면 재시작시키는 감시 기능\n  useEffect(() => {\n    const checkInactivity = () => {\n      const now = Date.now();\n      const timeSinceLastMove = now - lastComputerMoveTimeRef.current;\n\n      // 60초 이상 컴퓨터가 움직이지 않았을 경우 (이는 오류 상태로 간주)\n      if (isComputerThinking && timeSinceLastMove > 60000 && !isProcessingRef.current) {\n        console.log('컴퓨터가 오랫동안 응답이 없어 자동으로 재시작합니다.');\n        if (computerTimerRef.current) {\n          clearTimeout(computerTimerRef.current);\n          computerTimerRef.current = null;\n        }\n\n        // 컴퓨터 턴 재시작\n        startComputerTurn();\n      }\n    };\n\n    // 10초마다 비활성 상태 확인\n    watchdogTimerRef.current = setInterval(checkInactivity, 10000);\n    return () => {\n      if (watchdogTimerRef.current) {\n        clearInterval(watchdogTimerRef.current);\n        watchdogTimerRef.current = null;\n      }\n    };\n  }, [isComputerThinking, startComputerTurn]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isProcessingRef.current) {\n      validateSelection();\n    }\n  }, [selectedCards, validateSelection]);\n\n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3 && !isProcessingRef.current) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards, validateComputerSelection]);\n\n  // 보드 초기화\n  useEffect(() => {\n    const initGame = () => {\n      // 새로운 보드 초기화\n      const initialBoard = initializeBoard(usedCardIds);\n      setBoard(initialBoard);\n\n      // 선택 상태 초기화\n      setSelectedCards([]);\n      setComputerSelectedCards([]);\n      setPossibleCombinations([]);\n      setFadingCards([]);\n      setBlackFadingCards([]);\n      isProcessingRef.current = false;\n\n      // 컴퓨터 턴 시작 - 직접 호출\n      setTimeout(() => {\n        setIsComputerThinking(true);\n        lastComputerMoveTimeRef.current = Date.now();\n\n        // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n        const computerDelay = 10000 + Math.random() * 10000;\n        computerTimerRef.current = setTimeout(executeComputerTurn, computerDelay);\n      }, 100);\n    };\n\n    // 게임 시작\n    initGame();\n\n    // 컴포넌트 언마운트 시 타이머 정리\n    return () => {\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      if (watchdogTimerRef.current) {\n        clearInterval(watchdogTimerRef.current);\n        watchdogTimerRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRIO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-scores\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-score\",\n        children: [\"\\uD50C\\uB808\\uC774\\uC5B4: \", playerScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"computer-score\",\n        children: [\"\\uCEF4\\uD4E8\\uD130: \", computerScore, \" \", isComputerThinking && '🤔']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        selectedCards: selectedCards,\n        computerSelectedCards: computerSelectedCards,\n        possibleCombinations: [],\n        fadingCards: fadingCards,\n        blackFadingCards: blackFadingCards,\n        isComputerThinking: isComputerThinking,\n        onCardClick: handleCardSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-team-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"no-team-btn\",\n          onClick: handleNoTeam,\n          disabled: fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current,\n          children: \"\\uC870\\uD569 \\uC5C6\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      toast: toast,\n      setToast: setToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 545,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ENVxZnvRdJA7aK4wCEgNFNUdRZc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","GameBoard","Toast","initializeBoard","compareAttributes","refreshBoard","jsxDEV","_jsxDEV","App","_s","board","setBoard","selectedCards","setSelectedCards","validationResult","setValidationResult","playerScore","setPlayerScore","computerScore","setComputerScore","usedCardIds","setUsedCardIds","toast","setToast","isVisible","type","message","possibleCombinations","setPossibleCombinations","fadingCards","setFadingCards","blackFadingCards","setBlackFadingCards","computerSelectedCards","setComputerSelectedCards","isComputerThinking","setIsComputerThinking","computerTimerRef","watchdogTimerRef","isProcessingRef","lastComputerMoveTimeRef","Date","now","findAllValidCombinations","length","boardCards","slice","validCombinations","i","j","k","combination","isValid","push","startComputerTurn","current","computerDelay","Math","random","clearTimeout","setTimeout","executeComputerTurn","randomIndex","floor","selectedCombination","executeComputerNoTeam","error","console","prevScore","boardCardIds","map","card","id","prev","startNewRound","initialBoard","boardIds","uniqueIds","Set","size","validateComputerSelection","result","selectedIds","newBoard","newBoardIds","handleCardSelect","some","c","filter","validateSelection","handleNoTeam","max","checkInactivity","timeSinceLastMove","log","setInterval","clearInterval","initGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { Card, ValidationResult, ToastMessage } from './types/types';\n\nfunction App() {\n  const [board, setBoard] = useState<Card[]>([]);\n  const [selectedCards, setSelectedCards] = useState<Card[]>([]);\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [playerScore, setPlayerScore] = useState<number>(0);\n  const [computerScore, setComputerScore] = useState<number>(0);\n  const [usedCardIds, setUsedCardIds] = useState<number[]>([]);\n  const [toast, setToast] = useState<ToastMessage>({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState<Card[][]>([]);\n  const [fadingCards, setFadingCards] = useState<number[]>([]);\n  const [blackFadingCards, setBlackFadingCards] = useState<number[]>([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState<Card[]>([]);\n  const [isComputerThinking, setIsComputerThinking] = useState<boolean>(false);\n  const computerTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const watchdogTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const isProcessingRef = useRef<boolean>(false);\n  const lastComputerMoveTimeRef = useRef<number>(Date.now());\n  \n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback((): Card[][] => {\n    if (!board || board.length < 9) {\n      return [];\n    }\n    \n    const boardCards = board.slice(0, 9);\n    const validCombinations: Card[][] = [];\n    \n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    \n    return validCombinations;\n  }, [board]);\n  \n  // 컴퓨터 턴 시작 함수\n  const startComputerTurn = useCallback(() => {\n    // 이미 처리 중이거나 페이드아웃 중이면 스킵\n    if (isProcessingRef.current || fadingCards.length > 0 || blackFadingCards.length > 0) {\n      return false;\n    }\n    \n    setIsComputerThinking(true);\n    lastComputerMoveTimeRef.current = Date.now();\n    \n    // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n    const computerDelay = 10000 + Math.random() * 10000;\n    \n    // 이전 타이머가 있으면 정리\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    \n    computerTimerRef.current = setTimeout(() => {\n      // 컴퓨터 턴 실행\n      executeComputerTurn();\n    }, computerDelay);\n    \n    return true;\n  }, [fadingCards.length, blackFadingCards.length]);\n  \n  // 컴퓨터 턴 실행 함수\n  const executeComputerTurn = useCallback(() => {\n    // 상태 확인\n    if (isProcessingRef.current || fadingCards.length > 0 || blackFadingCards.length > 0) {\n      // 2초 후 다시 시도\n      setTimeout(() => {\n        if (!isProcessingRef.current && fadingCards.length === 0 && blackFadingCards.length === 0) {\n          executeComputerTurn();\n        }\n      }, 2000);\n      return;\n    }\n    \n    try {\n      // 컴퓨터 실행 시간 기록\n      lastComputerMoveTimeRef.current = Date.now();\n      \n      const validCombinations = findAllValidCombinations();\n      \n      if (validCombinations.length > 0) {\n        // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n        const randomIndex = Math.floor(Math.random() * validCombinations.length);\n        const selectedCombination = validCombinations[randomIndex];\n        \n        // 세 장의 카드를 한꺼번에 선택 (컴퓨터는 즉시 선택)\n        setComputerSelectedCards(selectedCombination);\n      } else {\n        // 유효한 조합이 없을 경우 NO TEAM 선택\n        executeComputerNoTeam();\n      }\n      \n      setIsComputerThinking(false);\n    } catch (error) {\n      console.error('컴퓨터 턴 처리 중 오류 발생:', error);\n      // 오류 복구\n      isProcessingRef.current = false;\n      setIsComputerThinking(false);\n      \n      // 3초 후에 다시 시작\n      setTimeout(startComputerTurn, 3000);\n    }\n  }, [findAllValidCombinations, fadingCards, blackFadingCards]);\n  \n  // 컴퓨터 NO TEAM 실행 함수\n  const executeComputerNoTeam = useCallback(() => {\n    if (isProcessingRef.current) return;\n    isProcessingRef.current = true;\n    \n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n    \n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n    \n    // 페이드아웃 효과를 위해 모든 카드 ID 저장 (검은색 페이드아웃)\n    setBlackFadingCards(boardCardIds);\n    \n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      try {\n        // 사용된 카드 ID 추가\n        setUsedCardIds(prev => [...prev, ...boardCardIds]);\n        setBlackFadingCards([]);\n        \n        // 새 라운드 시작\n        startNewRound();\n      } catch (error) {\n        console.error('컴퓨터 NO TEAM 처리 중 오류 발생:', error);\n        // 오류 복구\n        isProcessingRef.current = false;\n        setBlackFadingCards([]);\n        startNewRound();\n      }\n    }, 1000);\n  }, [board]);\n  \n  // 새 라운드 시작 함수\n  const startNewRound = useCallback(() => {\n    // 이전 타이머들 초기화\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    \n    // 새로운 보드 초기화\n    const initialBoard = initializeBoard(usedCardIds);\n    setBoard(initialBoard);\n    \n    // 선택 상태 초기화\n    setSelectedCards([]);\n    setComputerSelectedCards([]);\n    setPossibleCombinations([]);\n    setFadingCards([]);\n    setBlackFadingCards([]);\n    isProcessingRef.current = false;\n    \n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n    \n    // 컴퓨터 턴 시작 - 직접 호출\n    setTimeout(() => {\n      if (!isProcessingRef.current) {\n        setIsComputerThinking(true);\n        lastComputerMoveTimeRef.current = Date.now();\n        \n        // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n        const computerDelay = 10000 + Math.random() * 10000;\n        \n        computerTimerRef.current = setTimeout(executeComputerTurn, computerDelay);\n      }\n    }, 100);\n  }, [usedCardIds]);\n  \n  // 컴퓨터 선택 카드 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      \n      try {\n        const result = compareAttributes(computerSelectedCards);\n        \n        if (result.isValid) {\n          // 유효한 조합일 경우\n          const selectedIds = computerSelectedCards.map(card => card.id);\n          \n          // 검은색 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setBlackFadingCards(selectedIds);\n          \n          // 약간의 지연 후 점수 추가 및 UI 갱신\n          setTimeout(() => {\n            setComputerScore(prevScore => prevScore + 1);\n            \n            // 토스트 메시지 표시\n            setToast({\n              isVisible: true,\n              type: 'error',\n              message: '컴퓨터가 조합을 찾았습니다! +1점'\n            });\n            \n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...selectedIds]);\n            \n            // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n            setTimeout(() => {\n              try {\n                // 선택된 카드 교체\n                const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n                setBoard(newBoard);\n                // 페이드아웃 효과 해제\n                setBlackFadingCards([]);\n                // 선택 초기화\n                setComputerSelectedCards([]);\n                setSelectedCards([]);\n                // 처리 상태 해제\n                isProcessingRef.current = false;\n                \n                // 컴퓨터 다음 생각 시작\n                startComputerTurn();\n                \n                // 개발 디버깅용: 중복 카드 체크\n                const newBoardIds = newBoard.map(card => card.id);\n                const uniqueIds = new Set(newBoardIds);\n                if (uniqueIds.size !== newBoardIds.length) {\n                  console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n                }\n              } catch (error) {\n                console.error('컴퓨터 선택 처리 완료 중 오류 발생:', error);\n                // 오류 복구\n                isProcessingRef.current = false;\n                setBlackFadingCards([]);\n                startNewRound();\n              }\n            }, 800);\n          }, 1000);\n        } else {\n          // 유효하지 않은 조합일 경우 (이 경우는 일어나지 않아야 함)\n          console.error('컴퓨터가 유효하지 않은 조합을 선택했습니다:', computerSelectedCards);\n          setComputerSelectedCards([]);\n          isProcessingRef.current = false;\n          startComputerTurn();\n        }\n      } catch (error) {\n        console.error('컴퓨터 선택 검증 중 오류 발생:', error);\n        // 오류 복구\n        isProcessingRef.current = false;\n        setComputerSelectedCards([]);\n        startComputerTurn();\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds, startComputerTurn]);\n  \n  // 카드 선택 핸들러\n  const handleCardSelect = useCallback((card: Card) => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 선택 불가\n    \n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  }, [selectedCards, fadingCards, blackFadingCards, isProcessingRef]);\n  \n  // 플레이어 선택 검증\n  const validateSelection = useCallback(() => {\n    if (selectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      \n      // 이전 컴퓨터 타이머 취소\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      \n      try {\n        const result = compareAttributes(selectedCards);\n        setValidationResult(result);\n        \n        if (result.isValid) {\n          // 유효한 조합일 경우\n          setPlayerScore(prevScore => prevScore + 1);\n          \n          // 사용된 카드 ID 추가\n          const selectedIds = selectedCards.map(card => card.id);\n          setUsedCardIds(prev => [...prev, ...selectedIds]);\n          \n          // 토스트 메시지 표시\n          setToast({\n            isVisible: true,\n            type: 'success',\n            message: '유효한 조합입니다! +1점'\n          });\n          \n          // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n          setFadingCards(selectedIds);\n          \n          // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n          setTimeout(() => {\n            try {\n              // 선택된 카드 교체\n              const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n              setBoard(newBoard);\n              // 페이드아웃 효과 해제\n              setFadingCards([]);\n              // 선택 초기화\n              setSelectedCards([]);\n              setComputerSelectedCards([]);\n              // 처리 상태 해제\n              isProcessingRef.current = false;\n              // 가능한 조합 초기화\n              setPossibleCombinations([]);\n              \n              // 컴퓨터 다음 생각 시작\n              startComputerTurn();\n              \n              // 개발 디버깅용: 중복 카드 체크\n              const newBoardIds = newBoard.map(card => card.id);\n              const uniqueIds = new Set(newBoardIds);\n              if (uniqueIds.size !== newBoardIds.length) {\n                console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n              }\n            } catch (error) {\n              console.error('플레이어 선택 처리 완료 중 오류 발생:', error);\n              // 오류 복구\n              isProcessingRef.current = false;\n              setFadingCards([]);\n              startNewRound();\n            }\n          }, 600);\n        } else {\n          // 유효하지 않은 조합일 경우\n          setToast({\n            isVisible: true,\n            type: 'error',\n            message: '유효하지 않은 조합입니다.'\n          });\n          \n          // 선택 초기화\n          setSelectedCards([]);\n          isProcessingRef.current = false;\n          \n          // 컴퓨터 턴 다시 시작\n          startComputerTurn();\n        }\n      } catch (error) {\n        console.error('플레이어 선택 검증 중 오류 발생:', error);\n        // 오류 복구\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n        startComputerTurn();\n      }\n    }\n  }, [selectedCards, board, usedCardIds, startComputerTurn]);\n  \n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = useCallback(() => {\n    if (fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 동작 불가\n    isProcessingRef.current = true;\n    \n    // 이전 컴퓨터 타이머 취소\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    \n    try {\n      const validCombinations = findAllValidCombinations();\n      \n      if (validCombinations.length === 0) {\n        // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n        setPlayerScore(prevScore => prevScore + 10);\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '정확합니다! 가능한 조합이 없습니다. +10점'\n        });\n        \n        // 모든 카드 새로고침\n        const boardCardIds = board.slice(0, 9).map(card => card.id);\n        \n        // 페이드아웃 효과를 위해 모든 카드 ID 저장\n        setFadingCards(boardCardIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          try {\n            // 사용된 카드 ID 추가\n            setUsedCardIds(prev => [...prev, ...boardCardIds]);\n            \n            // 새 라운드 시작\n            startNewRound();\n          } catch (error) {\n            console.error('NO TEAM 처리 완료 중 오류 발생:', error);\n            // 오류 복구\n            isProcessingRef.current = false;\n            setFadingCards([]);\n            startNewRound();\n          }\n        }, 600);\n      } else {\n        // 유효한 조합이 있는 경우 - 점수 감점\n        setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '가능한 조합이 있습니다! -5점'\n        });\n        \n        // 선택 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n        \n        // 컴퓨터 턴 다시 시작\n        startComputerTurn();\n      }\n    } catch (error) {\n      console.error('NO TEAM 버튼 처리 중 오류 발생:', error);\n      // 오류 복구\n      isProcessingRef.current = false;\n      startComputerTurn();\n    }\n  }, [fadingCards, blackFadingCards, findAllValidCombinations, board, startNewRound, startComputerTurn]);\n  \n  // 컴퓨터가 일정 시간 동안 움직이지 않으면 재시작시키는 감시 기능\n  useEffect(() => {\n    const checkInactivity = () => {\n      const now = Date.now();\n      const timeSinceLastMove = now - lastComputerMoveTimeRef.current;\n      \n      // 60초 이상 컴퓨터가 움직이지 않았을 경우 (이는 오류 상태로 간주)\n      if (isComputerThinking && timeSinceLastMove > 60000 && !isProcessingRef.current) {\n        console.log('컴퓨터가 오랫동안 응답이 없어 자동으로 재시작합니다.');\n        if (computerTimerRef.current) {\n          clearTimeout(computerTimerRef.current);\n          computerTimerRef.current = null;\n        }\n        \n        // 컴퓨터 턴 재시작\n        startComputerTurn();\n      }\n    };\n    \n    // 10초마다 비활성 상태 확인\n    watchdogTimerRef.current = setInterval(checkInactivity, 10000);\n    \n    return () => {\n      if (watchdogTimerRef.current) {\n        clearInterval(watchdogTimerRef.current);\n        watchdogTimerRef.current = null;\n      }\n    };\n  }, [isComputerThinking, startComputerTurn]);\n  \n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isProcessingRef.current) {\n      validateSelection();\n    }\n  }, [selectedCards, validateSelection]);\n  \n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3 && !isProcessingRef.current) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards, validateComputerSelection]);\n  \n  // 보드 초기화\n  useEffect(() => {\n    const initGame = () => {\n      // 새로운 보드 초기화\n      const initialBoard = initializeBoard(usedCardIds);\n      setBoard(initialBoard);\n      \n      // 선택 상태 초기화\n      setSelectedCards([]);\n      setComputerSelectedCards([]);\n      setPossibleCombinations([]);\n      setFadingCards([]);\n      setBlackFadingCards([]);\n      isProcessingRef.current = false;\n      \n      // 컴퓨터 턴 시작 - 직접 호출\n      setTimeout(() => {\n        setIsComputerThinking(true);\n        lastComputerMoveTimeRef.current = Date.now();\n        \n        // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n        const computerDelay = 10000 + Math.random() * 10000;\n        \n        computerTimerRef.current = setTimeout(executeComputerTurn, computerDelay);\n      }, 100);\n    };\n    \n    // 게임 시작\n    initGame();\n    \n    // 컴포넌트 언마운트 시 타이머 정리\n    return () => {\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      if (watchdogTimerRef.current) {\n        clearInterval(watchdogTimerRef.current);\n        watchdogTimerRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>TRIO</h1>\n      <div className=\"game-scores\">\n        <div className=\"player-score\">\n          플레이어: {playerScore}\n        </div>\n        <div className=\"computer-score\">\n          컴퓨터: {computerScore} {isComputerThinking && '🤔'}\n        </div>\n      </div>\n      <div className=\"game-container\">\n        <GameBoard \n          board={board}\n          selectedCards={selectedCards}\n          computerSelectedCards={computerSelectedCards}\n          possibleCombinations={[]}\n          fadingCards={fadingCards}\n          blackFadingCards={blackFadingCards}\n          isComputerThinking={isComputerThinking}\n          onCardClick={handleCardSelect}\n        />\n        <div className=\"no-team-container\">\n          <button\n            className=\"no-team-btn\"\n            onClick={handleNoTeam}\n            disabled={fadingCards.length > 0 || blackFadingCards.length > 0 || isProcessingRef.current}\n          >\n            조합 없음\n          </button>\n        </div>\n      </div>\n      <Toast toast={toast} setToast={setToast} />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}