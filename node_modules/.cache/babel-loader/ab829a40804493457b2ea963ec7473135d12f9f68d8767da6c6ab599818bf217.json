{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport CardSelection from './components/CardSelection';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [validationResult, setValidationResult] = useState(null);\n  const [score, setScore] = useState(0);\n  const [usedCardIds, setUsedCardIds] = useState([]);\n  const [toast, setToast] = useState({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  useEffect(() => {\n    // 보드 초기화\n    setBoard(initializeBoard());\n  }, []);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3) {\n      validateSelection();\n    }\n  }, [selectedCards]);\n  const handleCardSelect = card => {\n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setScore(prevScore => prevScore + 1);\n\n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n\n        // 선택된 카드 교체\n        setBoard(prevBoard => refreshBoard(prevBoard, selectedIds, usedCardIds));\n\n        // 선택 초기화\n        setSelectedCards([]);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n\n        // 선택 초기화\n        setSelectedCards([]);\n      }\n    }\n  };\n  const resetSelection = () => {\n    setSelectedCards([]);\n    setValidationResult(null);\n  };\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedCards([]);\n    setValidationResult(null);\n    setScore(0);\n    setUsedCardIds([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uCE74\\uB4DC \\uC18D\\uC131 \\uAC8C\\uC784\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-score\",\n      children: [\"\\uC810\\uC218: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        selectedCards: selectedCards,\n        onCardClick: handleCardSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-controls\",\n        children: [/*#__PURE__*/_jsxDEV(CardSelection, {\n          selectedCards: selectedCards,\n          onCardClick: handleCardSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetSelection,\n            children: \"\\uC120\\uD0DD \\uCD08\\uAE30\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetGame,\n            children: \"\\uAC8C\\uC784 \\uC7AC\\uC2DC\\uC791\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      toast: toast,\n      setToast: setToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hxFN9USr+s6P3mQ4+6FZdVGGT0E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","CardSelection","Toast","initializeBoard","compareAttributes","refreshBoard","jsxDEV","_jsxDEV","App","_s","board","setBoard","selectedCards","setSelectedCards","validationResult","setValidationResult","score","setScore","usedCardIds","setUsedCardIds","toast","setToast","isVisible","type","message","length","validateSelection","handleCardSelect","card","some","c","id","filter","result","isValid","prevScore","selectedIds","map","prev","prevBoard","resetSelection","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","onClick","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport CardSelection from './components/CardSelection';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { Card, ValidationResult, ToastMessage } from './types/types';\n\nfunction App() {\n  const [board, setBoard] = useState<Card[]>([]);\n  const [selectedCards, setSelectedCards] = useState<Card[]>([]);\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [score, setScore] = useState<number>(0);\n  const [usedCardIds, setUsedCardIds] = useState<number[]>([]);\n  const [toast, setToast] = useState<ToastMessage>({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n\n  useEffect(() => {\n    // 보드 초기화\n    setBoard(initializeBoard());\n  }, []);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3) {\n      validateSelection();\n    }\n  }, [selectedCards]);\n\n  const handleCardSelect = (card: Card) => {\n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      \n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setScore(prevScore => prevScore + 1);\n        \n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n        \n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n        \n        // 선택된 카드 교체\n        setBoard(prevBoard => refreshBoard(prevBoard, selectedIds, usedCardIds));\n        \n        // 선택 초기화\n        setSelectedCards([]);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n        \n        // 선택 초기화\n        setSelectedCards([]);\n      }\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedCards([]);\n    setValidationResult(null);\n  };\n\n  const resetGame = () => {\n    setBoard(initializeBoard());\n    setSelectedCards([]);\n    setValidationResult(null);\n    setScore(0);\n    setUsedCardIds([]);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>카드 속성 게임</h1>\n      <div className=\"game-score\">점수: {score}</div>\n      <div className=\"game-container\">\n        <GameBoard \n          board={board} \n          selectedCards={selectedCards} \n          onCardClick={handleCardSelect} \n        />\n        <div className=\"game-controls\">\n          <CardSelection \n            selectedCards={selectedCards} \n            onCardClick={handleCardSelect}\n          />\n          <div className=\"game-buttons\">\n            <button onClick={resetSelection}>선택 초기화</button>\n            <button onClick={resetGame}>게임 재시작</button>\n          </div>\n        </div>\n      </div>\n      <Toast toast={toast} setToast={setToast} />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}