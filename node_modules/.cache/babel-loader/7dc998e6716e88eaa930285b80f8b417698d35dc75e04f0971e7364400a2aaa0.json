{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/components/CardSelection.tsx\";\nimport React from 'react';\nimport './CardSelection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardSelection = ({\n  selectedCards,\n  onCardClick\n}) => {\n  // 종족, 직업, 성향 한글 변환 함수\n  const getRaceText = race => {\n    const raceMap = {\n      'human': '인간',\n      'elf': '엘프',\n      'dwarf': '드워프'\n    };\n    return raceMap[race];\n  };\n  const getJobText = job => {\n    const jobMap = {\n      'warrior': '전사',\n      'mage': '마법사',\n      'archer': '궁수'\n    };\n    return jobMap[job];\n  };\n  const getAlignmentText = alignment => {\n    const alignmentMap = {\n      'cold': '냉철',\n      'order': '정렬',\n      'chaos': '혼돈'\n    };\n    return alignmentMap[alignment];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-selection\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC120\\uD0DD\\uB41C \\uCE74\\uB4DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-cards\",\n      children: [0, 1, 2].map(index => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-card-slot\",\n        children: index < selectedCards.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-card\",\n          onClick: () => onCardClick(selectedCards[index]),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedCards[index].imagePath,\n            alt: `${selectedCards[index].race} ${selectedCards[index].job}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-info\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-summary\",\n              children: `${getRaceText(selectedCards[index].race)} ${getJobText(selectedCards[index].job)} (${getAlignmentText(selectedCards[index].alignment)})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-slot\",\n          children: \"\\uCE74\\uB4DC\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c = CardSelection;\nexport default CardSelection;\nvar _c;\n$RefreshReg$(_c, \"CardSelection\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CardSelection","selectedCards","onCardClick","getRaceText","race","raceMap","getJobText","job","jobMap","getAlignmentText","alignment","alignmentMap","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","length","onClick","src","imagePath","alt","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/components/CardSelection.tsx"],"sourcesContent":["import React from 'react';\nimport { Card } from '../types/types';\nimport './CardSelection.css';\n\ninterface CardSelectionProps {\n  selectedCards: Card[];\n  onCardClick: (card: Card) => void;\n}\n\nconst CardSelection: React.FC<CardSelectionProps> = ({ selectedCards, onCardClick }) => {\n  // 종족, 직업, 성향 한글 변환 함수\n  const getRaceText = (race: Card['race']): string => {\n    const raceMap: Record<Card['race'], string> = {\n      'human': '인간',\n      'elf': '엘프',\n      'dwarf': '드워프'\n    };\n    return raceMap[race];\n  };\n\n  const getJobText = (job: Card['job']): string => {\n    const jobMap: Record<Card['job'], string> = {\n      'warrior': '전사',\n      'mage': '마법사',\n      'archer': '궁수'\n    };\n    return jobMap[job];\n  };\n\n  const getAlignmentText = (alignment: Card['alignment']): string => {\n    const alignmentMap: Record<Card['alignment'], string> = {\n      'cold': '냉철',\n      'order': '정렬',\n      'chaos': '혼돈'\n    };\n    return alignmentMap[alignment];\n  };\n\n  return (\n    <div className=\"card-selection\">\n      <h2>선택된 카드</h2>\n      <div className=\"selected-cards\">\n        {[0, 1, 2].map((index) => (\n          <div key={index} className=\"selected-card-slot\">\n            {index < selectedCards.length ? (\n              <div className=\"selected-card\" onClick={() => onCardClick(selectedCards[index])}>\n                <img \n                  src={selectedCards[index].imagePath} \n                  alt={`${selectedCards[index].race} ${selectedCards[index].job}`} \n                />\n                <div className=\"card-info\">\n                  <div className=\"card-summary\">\n                    {`${getRaceText(selectedCards[index].race)} ${getJobText(selectedCards[index].job)} (${getAlignmentText(selectedCards[index].alignment)})`}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"empty-slot\">카드를 선택하세요</div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CardSelection; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}