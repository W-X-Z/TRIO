{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [validationResult, setValidationResult] = useState(null);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const [usedCardIds, setUsedCardIds] = useState([]);\n  const [toast, setToast] = useState({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState([]);\n  const [fadingCards, setFadingCards] = useState([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState([]);\n  const [isComputerTurn, setIsComputerTurn] = useState(false);\n\n  // 보드 초기화\n  useEffect(() => {\n    setBoard(initializeBoard());\n\n    // 게임 시작 시 첫 번째 턴 결정 (랜덤)\n    setIsComputerTurn(Math.random() < 0.5);\n  }, []);\n\n  // 컴퓨터 턴 처리\n  useEffect(() => {\n    if (isComputerTurn && board.length > 0 && !fadingCards.length) {\n      // 컴퓨터 턴 시작 시 지연시간 설정 (1.5-3초)\n      const delay = 1500 + Math.random() * 1500;\n      const computerTurnTimeout = setTimeout(() => {\n        computerTurn();\n      }, delay);\n      return () => clearTimeout(computerTurnTimeout);\n    }\n  }, [isComputerTurn, board, fadingCards]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isComputerTurn) {\n      validateSelection();\n    }\n  }, [selectedCards, isComputerTurn]);\n\n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback(() => {\n    const boardCards = board.slice(0, 9);\n    const validCombinations = [];\n\n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    return validCombinations;\n  }, [board]);\n\n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (fadingCards.length > 0) return;\n    const validCombinations = findAllValidCombinations();\n    if (validCombinations.length > 0) {\n      // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n      const randomIndex = Math.floor(Math.random() * validCombinations.length);\n      const selectedCombination = validCombinations[randomIndex];\n\n      // 첫 번째 카드 선택\n      setComputerSelectedCards([selectedCombination[0]]);\n\n      // 두 번째 카드 선택 (0.6초 뒤)\n      setTimeout(() => {\n        setComputerSelectedCards(prev => [...prev, selectedCombination[1]]);\n\n        // 세 번째 카드 선택 (추가 0.6초 뒤)\n        setTimeout(() => {\n          setComputerSelectedCards(prev => [...prev, selectedCombination[2]]);\n        }, 600);\n      }, 600);\n    } else {\n      // 유효한 조합이 없을 경우 NO TEAM 선택\n      handleNoTeam();\n    }\n  }, [board, fadingCards, findAllValidCombinations]);\n\n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      const result = compareAttributes(computerSelectedCards);\n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setComputerScore(prevScore => prevScore + 1);\n\n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '컴퓨터가 조합을 찾았습니다! +1점'\n        });\n\n        // 사용된 카드 ID 추가\n        const selectedIds = computerSelectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          setBoard(prevBoard => refreshBoard(prevBoard, selectedIds, usedCardIds));\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setComputerSelectedCards([]);\n          // 턴 변경\n          setIsComputerTurn(false);\n        }, 600);\n      }\n    }\n  }, [computerSelectedCards, usedCardIds]);\n  const handleCardSelect = card => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 선택 불가\n\n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setPlayerScore(prevScore => prevScore + 1);\n\n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n\n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          setBoard(prevBoard => refreshBoard(prevBoard, selectedIds, usedCardIds));\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setSelectedCards([]);\n          // 컴퓨터 턴으로 변경\n          setIsComputerTurn(true);\n        }, 600);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n\n        // 선택 초기화\n        setSelectedCards([]);\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 동작 불가\n\n    const validCombinations = findAllValidCombinations();\n    if (validCombinations.length === 0) {\n      // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n      setPlayerScore(prevScore => prevScore + 10);\n      setToast({\n        isVisible: true,\n        type: 'success',\n        message: '정확합니다! 가능한 조합이 없습니다. +10점'\n      });\n\n      // 모든 카드 새로고침\n      const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n      // 페이드아웃 효과를 위해 모든 카드 ID 저장\n      setFadingCards(boardCardIds);\n\n      // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n      setTimeout(() => {\n        setBoard(prevBoard => refreshBoard(prevBoard, boardCardIds, usedCardIds));\n        setFadingCards([]);\n        setSelectedCards([]);\n        setIsComputerTurn(true);\n      }, 600);\n    } else {\n      // 유효한 조합이 있는 경우 - 점수 감점 및 가능한 조합 표시\n      setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n      setToast({\n        isVisible: true,\n        type: 'error',\n        message: '가능한 조합이 있습니다! -5점'\n      });\n\n      // 첫 번째 가능한 조합을 표시\n      setPossibleCombinations(validCombinations);\n      // 선택 초기화\n      setSelectedCards([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRIO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-scores\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `player-score ${!isComputerTurn ? 'active' : ''}`,\n        children: [\"\\uD50C\\uB808\\uC774\\uC5B4: \", playerScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `computer-score ${isComputerTurn ? 'active' : ''}`,\n        children: [\"\\uCEF4\\uD4E8\\uD130: \", computerScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        selectedCards: selectedCards,\n        computerSelectedCards: computerSelectedCards,\n        possibleCombinations: possibleCombinations,\n        fadingCards: fadingCards,\n        isComputerTurn: isComputerTurn,\n        onCardClick: handleCardSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-team-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"no-team-btn\",\n          onClick: handleNoTeam,\n          disabled: isComputerTurn,\n          children: \"NO TEAM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      toast: toast,\n      setToast: setToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"szUqKkxhkVtIUphyGL3sTTcWfGg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GameBoard","Toast","initializeBoard","compareAttributes","refreshBoard","jsxDEV","_jsxDEV","App","_s","board","setBoard","selectedCards","setSelectedCards","validationResult","setValidationResult","playerScore","setPlayerScore","computerScore","setComputerScore","usedCardIds","setUsedCardIds","toast","setToast","isVisible","type","message","possibleCombinations","setPossibleCombinations","fadingCards","setFadingCards","computerSelectedCards","setComputerSelectedCards","isComputerTurn","setIsComputerTurn","Math","random","length","delay","computerTurnTimeout","setTimeout","computerTurn","clearTimeout","validateSelection","validateComputerSelection","findAllValidCombinations","boardCards","slice","validCombinations","i","j","k","combination","isValid","push","randomIndex","floor","selectedCombination","prev","handleNoTeam","result","prevScore","selectedIds","map","card","id","prevBoard","handleCardSelect","some","c","filter","boardCardIds","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { Card, ValidationResult, ToastMessage } from './types/types';\n\nfunction App() {\n  const [board, setBoard] = useState<Card[]>([]);\n  const [selectedCards, setSelectedCards] = useState<Card[]>([]);\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [playerScore, setPlayerScore] = useState<number>(0);\n  const [computerScore, setComputerScore] = useState<number>(0);\n  const [usedCardIds, setUsedCardIds] = useState<number[]>([]);\n  const [toast, setToast] = useState<ToastMessage>({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState<Card[][]>([]);\n  const [fadingCards, setFadingCards] = useState<number[]>([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState<Card[]>([]);\n  const [isComputerTurn, setIsComputerTurn] = useState<boolean>(false);\n  \n  // 보드 초기화\n  useEffect(() => {\n    setBoard(initializeBoard());\n    \n    // 게임 시작 시 첫 번째 턴 결정 (랜덤)\n    setIsComputerTurn(Math.random() < 0.5);\n  }, []);\n  \n  // 컴퓨터 턴 처리\n  useEffect(() => {\n    if (isComputerTurn && board.length > 0 && !fadingCards.length) {\n      // 컴퓨터 턴 시작 시 지연시간 설정 (1.5-3초)\n      const delay = 1500 + Math.random() * 1500;\n      \n      const computerTurnTimeout = setTimeout(() => {\n        computerTurn();\n      }, delay);\n      \n      return () => clearTimeout(computerTurnTimeout);\n    }\n  }, [isComputerTurn, board, fadingCards]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isComputerTurn) {\n      validateSelection();\n    }\n  }, [selectedCards, isComputerTurn]);\n  \n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback((): Card[][] => {\n    const boardCards = board.slice(0, 9);\n    const validCombinations: Card[][] = [];\n    \n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    \n    return validCombinations;\n  }, [board]);\n  \n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (fadingCards.length > 0) return;\n    \n    const validCombinations = findAllValidCombinations();\n    \n    if (validCombinations.length > 0) {\n      // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n      const randomIndex = Math.floor(Math.random() * validCombinations.length);\n      const selectedCombination = validCombinations[randomIndex];\n      \n      // 첫 번째 카드 선택\n      setComputerSelectedCards([selectedCombination[0]]);\n      \n      // 두 번째 카드 선택 (0.6초 뒤)\n      setTimeout(() => {\n        setComputerSelectedCards(prev => [...prev, selectedCombination[1]]);\n        \n        // 세 번째 카드 선택 (추가 0.6초 뒤)\n        setTimeout(() => {\n          setComputerSelectedCards(prev => [...prev, selectedCombination[2]]);\n        }, 600);\n      }, 600);\n    } else {\n      // 유효한 조합이 없을 경우 NO TEAM 선택\n      handleNoTeam();\n    }\n  }, [board, fadingCards, findAllValidCombinations]);\n  \n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      const result = compareAttributes(computerSelectedCards);\n      \n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setComputerScore(prevScore => prevScore + 1);\n        \n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '컴퓨터가 조합을 찾았습니다! +1점'\n        });\n        \n        // 사용된 카드 ID 추가\n        const selectedIds = computerSelectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n        \n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          setBoard(prevBoard => refreshBoard(prevBoard, selectedIds, usedCardIds));\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setComputerSelectedCards([]);\n          // 턴 변경\n          setIsComputerTurn(false);\n        }, 600);\n      }\n    }\n  }, [computerSelectedCards, usedCardIds]);\n\n  const handleCardSelect = (card: Card) => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 선택 불가\n    \n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      \n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setPlayerScore(prevScore => prevScore + 1);\n        \n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n        \n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n        \n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          setBoard(prevBoard => refreshBoard(prevBoard, selectedIds, usedCardIds));\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setSelectedCards([]);\n          // 컴퓨터 턴으로 변경\n          setIsComputerTurn(true);\n        }, 600);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n        \n        // 선택 초기화\n        setSelectedCards([]);\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || isComputerTurn) return; // 카드 페이드아웃 중이나 컴퓨터 턴이면 동작 불가\n    \n    const validCombinations = findAllValidCombinations();\n    \n    if (validCombinations.length === 0) {\n      // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n      setPlayerScore(prevScore => prevScore + 10);\n      setToast({\n        isVisible: true,\n        type: 'success',\n        message: '정확합니다! 가능한 조합이 없습니다. +10점'\n      });\n      \n      // 모든 카드 새로고침\n      const boardCardIds = board.slice(0, 9).map(card => card.id);\n      \n      // 페이드아웃 효과를 위해 모든 카드 ID 저장\n      setFadingCards(boardCardIds);\n      \n      // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n      setTimeout(() => {\n        setBoard(prevBoard => refreshBoard(prevBoard, boardCardIds, usedCardIds));\n        setFadingCards([]);\n        setSelectedCards([]);\n        setIsComputerTurn(true);\n      }, 600);\n    } else {\n      // 유효한 조합이 있는 경우 - 점수 감점 및 가능한 조합 표시\n      setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n      setToast({\n        isVisible: true,\n        type: 'error',\n        message: '가능한 조합이 있습니다! -5점'\n      });\n      \n      // 첫 번째 가능한 조합을 표시\n      setPossibleCombinations(validCombinations);\n      // 선택 초기화\n      setSelectedCards([]);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>TRIO</h1>\n      <div className=\"game-scores\">\n        <div className={`player-score ${!isComputerTurn ? 'active' : ''}`}>\n          플레이어: {playerScore}\n        </div>\n        <div className={`computer-score ${isComputerTurn ? 'active' : ''}`}>\n          컴퓨터: {computerScore}\n        </div>\n      </div>\n      <div className=\"game-container\">\n        <GameBoard \n          board={board} \n          selectedCards={selectedCards}\n          computerSelectedCards={computerSelectedCards}\n          possibleCombinations={possibleCombinations}\n          fadingCards={fadingCards}\n          isComputerTurn={isComputerTurn}\n          onCardClick={handleCardSelect} \n        />\n        <div className=\"no-team-container\">\n          <button \n            className=\"no-team-btn\" \n            onClick={handleNoTeam}\n            disabled={isComputerTurn}\n          >\n            NO TEAM\n          </button>\n        </div>\n      </div>\n      <Toast toast={toast} setToast={setToast} />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}