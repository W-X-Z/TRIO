{"ast":null,"code":"var _jsxFileName = \"/Users/nhwm1/Desktop/TRIO/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [validationResult, setValidationResult] = useState(null);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const [usedCardIds, setUsedCardIds] = useState([]);\n  const [toast, setToast] = useState({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState([]);\n  const [fadingCards, setFadingCards] = useState([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState([]);\n  const [isComputerThinking, setIsComputerThinking] = useState(false);\n  const computerTimerRef = useRef(null);\n  const isProcessingRef = useRef(false);\n\n  // 보드 초기화\n  useEffect(() => {\n    startNewRound();\n\n    // 컴포넌트 언마운트 시 타이머 정리\n    return () => {\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n      }\n    };\n  }, []);\n\n  // 새 라운드 시작 함수\n  const startNewRound = useCallback(() => {\n    // 이전 컴퓨터 타이머 초기화\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n    }\n\n    // 새로운 보드 초기화\n    const initialBoard = initializeBoard(usedCardIds);\n    setBoard(initialBoard);\n\n    // 선택 상태 초기화\n    setSelectedCards([]);\n    setComputerSelectedCards([]);\n    setPossibleCombinations([]);\n    setFadingCards([]);\n    isProcessingRef.current = false;\n\n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n\n    // 컴퓨터 사고 시작\n    setIsComputerThinking(true);\n\n    // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n    const computerDelay = 10000 + Math.random() * 10000;\n    computerTimerRef.current = setTimeout(() => {\n      if (!isProcessingRef.current) {\n        computerTurn();\n      }\n    }, computerDelay);\n  }, [usedCardIds]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isProcessingRef.current) {\n      validateSelection();\n    }\n  }, [selectedCards]);\n\n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3 && !isProcessingRef.current) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback(() => {\n    const boardCards = board.slice(0, 9);\n    const validCombinations = [];\n\n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    return validCombinations;\n  }, [board]);\n\n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (isProcessingRef.current || fadingCards.length > 0) return;\n    const validCombinations = findAllValidCombinations();\n    if (validCombinations.length > 0) {\n      // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n      const randomIndex = Math.floor(Math.random() * validCombinations.length);\n      const selectedCombination = validCombinations[randomIndex];\n\n      // 세 장의 카드를 한꺼번에 선택 (컴퓨터는 즉시 선택)\n      setComputerSelectedCards(selectedCombination);\n    } else {\n      // 유효한 조합이 없을 경우 NO TEAM 선택\n      handleComputerNoTeam();\n    }\n    setIsComputerThinking(false);\n  }, [board, fadingCards, findAllValidCombinations]);\n\n  // 컴퓨터의 NO TEAM 선택 처리\n  const handleComputerNoTeam = useCallback(() => {\n    if (isProcessingRef.current) return;\n    isProcessingRef.current = true;\n\n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n\n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n    // 페이드아웃 효과를 위해 모든 카드 ID 저장\n    setFadingCards(boardCardIds);\n\n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      // 사용된 카드 ID 추가\n      setUsedCardIds(prev => [...prev, ...boardCardIds]);\n\n      // 새 라운드 시작\n      startNewRound();\n    }, 600);\n  }, [board, startNewRound]);\n\n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      const result = compareAttributes(computerSelectedCards);\n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setComputerScore(prevScore => prevScore + 1);\n\n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '컴퓨터가 조합을 찾았습니다! +1점'\n        });\n\n        // 사용된 카드 ID 추가\n        const selectedIds = computerSelectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setComputerSelectedCards([]);\n          setSelectedCards([]);\n          // 처리 상태 해제\n          isProcessingRef.current = false;\n\n          // 컴퓨터 다음 생각 시작 (10~20초)\n          setIsComputerThinking(true);\n          const computerDelay = 10000 + Math.random() * 10000;\n          computerTimerRef.current = setTimeout(() => {\n            if (!isProcessingRef.current) {\n              computerTurn();\n            }\n          }, computerDelay);\n\n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds, computerTurn, startNewRound]);\n  const handleCardSelect = card => {\n    if (fadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 선택 불가\n\n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n\n      // 이전 컴퓨터 타이머 취소\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setPlayerScore(prevScore => prevScore + 1);\n\n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n\n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n\n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n\n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setSelectedCards([]);\n          setComputerSelectedCards([]);\n          // 처리 상태 해제\n          isProcessingRef.current = false;\n          // 가능한 조합 초기화\n          setPossibleCombinations([]);\n\n          // 컴퓨터 다음 생각 시작 (10~20초)\n          setIsComputerThinking(true);\n          const computerDelay = 10000 + Math.random() * 10000;\n          computerTimerRef.current = setTimeout(() => {\n            if (!isProcessingRef.current) {\n              computerTurn();\n            }\n          }, computerDelay);\n\n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n\n        // 선택 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 동작 불가\n    isProcessingRef.current = true;\n\n    // 이전 컴퓨터 타이머 취소\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    const validCombinations = findAllValidCombinations();\n    if (validCombinations.length === 0) {\n      // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n      setPlayerScore(prevScore => prevScore + 10);\n      setToast({\n        isVisible: true,\n        type: 'success',\n        message: '정확합니다! 가능한 조합이 없습니다. +10점'\n      });\n\n      // 모든 카드 새로고침\n      const boardCardIds = board.slice(0, 9).map(card => card.id);\n\n      // 페이드아웃 효과를 위해 모든 카드 ID 저장\n      setFadingCards(boardCardIds);\n\n      // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n      setTimeout(() => {\n        // 사용된 카드 ID 추가\n        setUsedCardIds(prev => [...prev, ...boardCardIds]);\n\n        // 새 라운드 시작\n        startNewRound();\n      }, 600);\n    } else {\n      // 유효한 조합이 있는 경우 - 점수 감점 및 가능한 조합 표시\n      setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n      setToast({\n        isVisible: true,\n        type: 'error',\n        message: '가능한 조합이 있습니다! -5점'\n      });\n\n      // 첫 번째 가능한 조합을 표시\n      setPossibleCombinations(validCombinations);\n      // 선택 초기화\n      setSelectedCards([]);\n      isProcessingRef.current = false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TRIO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-scores\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-score\",\n        children: [\"\\uD50C\\uB808\\uC774\\uC5B4: \", playerScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `computer-score ${isComputerThinking ? 'thinking' : ''}`,\n        children: [\"\\uCEF4\\uD4E8\\uD130: \", computerScore, \" \", isComputerThinking && '🤔']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        board: board,\n        selectedCards: selectedCards,\n        computerSelectedCards: computerSelectedCards,\n        possibleCombinations: possibleCombinations,\n        fadingCards: fadingCards,\n        isComputerThinking: isComputerThinking,\n        onCardClick: handleCardSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-team-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"no-team-btn\",\n          onClick: handleNoTeam,\n          disabled: isProcessingRef.current,\n          children: \"NO TEAM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      toast: toast,\n      setToast: setToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 365,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Wub64KoxMpMSU7W5GIejyBTZxU8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","GameBoard","Toast","initializeBoard","compareAttributes","refreshBoard","jsxDEV","_jsxDEV","App","_s","board","setBoard","selectedCards","setSelectedCards","validationResult","setValidationResult","playerScore","setPlayerScore","computerScore","setComputerScore","usedCardIds","setUsedCardIds","toast","setToast","isVisible","type","message","possibleCombinations","setPossibleCombinations","fadingCards","setFadingCards","computerSelectedCards","setComputerSelectedCards","isComputerThinking","setIsComputerThinking","computerTimerRef","isProcessingRef","startNewRound","current","clearTimeout","initialBoard","boardIds","map","card","id","uniqueIds","Set","size","length","console","error","computerDelay","Math","random","setTimeout","computerTurn","validateSelection","validateComputerSelection","findAllValidCombinations","boardCards","slice","validCombinations","i","j","k","combination","isValid","push","randomIndex","floor","selectedCombination","handleComputerNoTeam","prevScore","boardCardIds","prev","result","selectedIds","newBoard","newBoardIds","handleCardSelect","some","c","filter","handleNoTeam","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/nhwm1/Desktop/TRIO/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard';\nimport Toast from './components/Toast';\nimport { initializeBoard, compareAttributes, refreshBoard } from './utils/gameLogic';\nimport { Card, ValidationResult, ToastMessage } from './types/types';\n\nfunction App() {\n  const [board, setBoard] = useState<Card[]>([]);\n  const [selectedCards, setSelectedCards] = useState<Card[]>([]);\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null);\n  const [playerScore, setPlayerScore] = useState<number>(0);\n  const [computerScore, setComputerScore] = useState<number>(0);\n  const [usedCardIds, setUsedCardIds] = useState<number[]>([]);\n  const [toast, setToast] = useState<ToastMessage>({\n    isVisible: false,\n    type: 'success',\n    message: ''\n  });\n  const [possibleCombinations, setPossibleCombinations] = useState<Card[][]>([]);\n  const [fadingCards, setFadingCards] = useState<number[]>([]);\n  const [computerSelectedCards, setComputerSelectedCards] = useState<Card[]>([]);\n  const [isComputerThinking, setIsComputerThinking] = useState<boolean>(false);\n  const computerTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const isProcessingRef = useRef<boolean>(false);\n  \n  // 보드 초기화\n  useEffect(() => {\n    startNewRound();\n    \n    // 컴포넌트 언마운트 시 타이머 정리\n    return () => {\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n      }\n    };\n  }, []);\n  \n  // 새 라운드 시작 함수\n  const startNewRound = useCallback(() => {\n    // 이전 컴퓨터 타이머 초기화\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n    }\n    \n    // 새로운 보드 초기화\n    const initialBoard = initializeBoard(usedCardIds);\n    setBoard(initialBoard);\n    \n    // 선택 상태 초기화\n    setSelectedCards([]);\n    setComputerSelectedCards([]);\n    setPossibleCombinations([]);\n    setFadingCards([]);\n    isProcessingRef.current = false;\n    \n    // 개발 디버깅용: 중복 카드 체크\n    const boardIds = initialBoard.map(card => card.id);\n    const uniqueIds = new Set(boardIds);\n    if (uniqueIds.size !== boardIds.length) {\n      console.error('초기 보드에 중복된 카드가 있습니다!', boardIds);\n    }\n    \n    // 컴퓨터 사고 시작\n    setIsComputerThinking(true);\n    \n    // 컴퓨터의 응답 시간을 10~20초 사이로 랜덤 설정\n    const computerDelay = 10000 + Math.random() * 10000;\n    \n    computerTimerRef.current = setTimeout(() => {\n      if (!isProcessingRef.current) {\n        computerTurn();\n      }\n    }, computerDelay);\n  }, [usedCardIds]);\n\n  // 3장의 카드가 선택될 때마다 자동으로 유효성 검증\n  useEffect(() => {\n    if (selectedCards.length === 3 && !isProcessingRef.current) {\n      validateSelection();\n    }\n  }, [selectedCards]);\n  \n  // 컴퓨터 선택 카드 검증\n  useEffect(() => {\n    if (computerSelectedCards.length === 3 && !isProcessingRef.current) {\n      validateComputerSelection();\n    }\n  }, [computerSelectedCards]);\n\n  // 가능한 모든 3장 조합을 확인하는 함수\n  const findAllValidCombinations = useCallback((): Card[][] => {\n    const boardCards = board.slice(0, 9);\n    const validCombinations: Card[][] = [];\n    \n    // 모든 가능한 3장 조합 생성\n    for (let i = 0; i < boardCards.length; i++) {\n      for (let j = i + 1; j < boardCards.length; j++) {\n        for (let k = j + 1; k < boardCards.length; k++) {\n          const combination = [boardCards[i], boardCards[j], boardCards[k]];\n          // 유효한 조합인지 확인\n          if (compareAttributes(combination).isValid) {\n            validCombinations.push(combination);\n          }\n        }\n      }\n    }\n    \n    return validCombinations;\n  }, [board]);\n  \n  // 컴퓨터 턴 처리 함수\n  const computerTurn = useCallback(() => {\n    if (isProcessingRef.current || fadingCards.length > 0) return;\n    \n    const validCombinations = findAllValidCombinations();\n    \n    if (validCombinations.length > 0) {\n      // 유효한 조합이 있을 경우 랜덤으로 하나 선택\n      const randomIndex = Math.floor(Math.random() * validCombinations.length);\n      const selectedCombination = validCombinations[randomIndex];\n      \n      // 세 장의 카드를 한꺼번에 선택 (컴퓨터는 즉시 선택)\n      setComputerSelectedCards(selectedCombination);\n    } else {\n      // 유효한 조합이 없을 경우 NO TEAM 선택\n      handleComputerNoTeam();\n    }\n    \n    setIsComputerThinking(false);\n  }, [board, fadingCards, findAllValidCombinations]);\n  \n  // 컴퓨터의 NO TEAM 선택 처리\n  const handleComputerNoTeam = useCallback(() => {\n    if (isProcessingRef.current) return;\n    isProcessingRef.current = true;\n    \n    // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n    setComputerScore(prevScore => prevScore + 10);\n    setToast({\n      isVisible: true,\n      type: 'error',\n      message: '컴퓨터가 NO TEAM을 선택했습니다! +10점'\n    });\n    \n    // 모든 카드 새로고침\n    const boardCardIds = board.slice(0, 9).map(card => card.id);\n    \n    // 페이드아웃 효과를 위해 모든 카드 ID 저장\n    setFadingCards(boardCardIds);\n    \n    // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n    setTimeout(() => {\n      // 사용된 카드 ID 추가\n      setUsedCardIds(prev => [...prev, ...boardCardIds]);\n      \n      // 새 라운드 시작\n      startNewRound();\n    }, 600);\n  }, [board, startNewRound]);\n  \n  // 컴퓨터 선택 검증\n  const validateComputerSelection = useCallback(() => {\n    if (computerSelectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      \n      const result = compareAttributes(computerSelectedCards);\n      \n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setComputerScore(prevScore => prevScore + 1);\n        \n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '컴퓨터가 조합을 찾았습니다! +1점'\n        });\n        \n        // 사용된 카드 ID 추가\n        const selectedIds = computerSelectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n        \n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setComputerSelectedCards([]);\n          setSelectedCards([]);\n          // 처리 상태 해제\n          isProcessingRef.current = false;\n          \n          // 컴퓨터 다음 생각 시작 (10~20초)\n          setIsComputerThinking(true);\n          const computerDelay = 10000 + Math.random() * 10000;\n          computerTimerRef.current = setTimeout(() => {\n            if (!isProcessingRef.current) {\n              computerTurn();\n            }\n          }, computerDelay);\n          \n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('컴퓨터 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      }\n    }\n  }, [computerSelectedCards, board, usedCardIds, computerTurn, startNewRound]);\n\n  const handleCardSelect = (card: Card) => {\n    if (fadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 선택 불가\n    \n    if (selectedCards.some(c => c.id === card.id)) {\n      // 이미 선택된 카드면 선택 취소\n      setSelectedCards(selectedCards.filter(c => c.id !== card.id));\n    } else if (selectedCards.length < 3) {\n      // 3장 미만이면 선택\n      setSelectedCards([...selectedCards, card]);\n    }\n  };\n\n  const validateSelection = () => {\n    if (selectedCards.length === 3) {\n      if (isProcessingRef.current) return;\n      isProcessingRef.current = true;\n      \n      // 이전 컴퓨터 타이머 취소\n      if (computerTimerRef.current) {\n        clearTimeout(computerTimerRef.current);\n        computerTimerRef.current = null;\n      }\n      \n      const result = compareAttributes(selectedCards);\n      setValidationResult(result);\n      \n      if (result.isValid) {\n        // 유효한 조합일 경우\n        setPlayerScore(prevScore => prevScore + 1);\n        \n        // 사용된 카드 ID 추가\n        const selectedIds = selectedCards.map(card => card.id);\n        setUsedCardIds(prev => [...prev, ...selectedIds]);\n        \n        // 토스트 메시지 표시\n        setToast({\n          isVisible: true,\n          type: 'success',\n          message: '유효한 조합입니다! +1점'\n        });\n        \n        // 페이드아웃 효과를 위해 선택된 카드 ID 저장\n        setFadingCards(selectedIds);\n        \n        // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n        setTimeout(() => {\n          // 선택된 카드 교체\n          const newBoard = refreshBoard(board, selectedIds, usedCardIds);\n          setBoard(newBoard);\n          // 페이드아웃 효과 해제\n          setFadingCards([]);\n          // 선택 초기화\n          setSelectedCards([]);\n          setComputerSelectedCards([]);\n          // 처리 상태 해제\n          isProcessingRef.current = false;\n          // 가능한 조합 초기화\n          setPossibleCombinations([]);\n          \n          // 컴퓨터 다음 생각 시작 (10~20초)\n          setIsComputerThinking(true);\n          const computerDelay = 10000 + Math.random() * 10000;\n          computerTimerRef.current = setTimeout(() => {\n            if (!isProcessingRef.current) {\n              computerTurn();\n            }\n          }, computerDelay);\n          \n          // 개발 디버깅용: 중복 카드 체크\n          const newBoardIds = newBoard.map(card => card.id);\n          const uniqueIds = new Set(newBoardIds);\n          if (uniqueIds.size !== newBoardIds.length) {\n            console.error('플레이어 턴 후 새 보드에 중복된 카드가 있습니다!', newBoardIds);\n          }\n        }, 600);\n      } else {\n        // 유효하지 않은 조합일 경우\n        setToast({\n          isVisible: true,\n          type: 'error',\n          message: '유효하지 않은 조합입니다.'\n        });\n        \n        // 선택 초기화\n        setSelectedCards([]);\n        isProcessingRef.current = false;\n      }\n    }\n  };\n\n  // NO TEAM 버튼 클릭 핸들러\n  const handleNoTeam = () => {\n    if (fadingCards.length > 0 || isProcessingRef.current) return; // 카드 페이드아웃 중이나 처리 중이면 동작 불가\n    isProcessingRef.current = true;\n    \n    // 이전 컴퓨터 타이머 취소\n    if (computerTimerRef.current) {\n      clearTimeout(computerTimerRef.current);\n      computerTimerRef.current = null;\n    }\n    \n    const validCombinations = findAllValidCombinations();\n    \n    if (validCombinations.length === 0) {\n      // 유효한 조합이 없는 경우 - 점수 추가 및 보드 새로고침\n      setPlayerScore(prevScore => prevScore + 10);\n      setToast({\n        isVisible: true,\n        type: 'success',\n        message: '정확합니다! 가능한 조합이 없습니다. +10점'\n      });\n      \n      // 모든 카드 새로고침\n      const boardCardIds = board.slice(0, 9).map(card => card.id);\n      \n      // 페이드아웃 효과를 위해 모든 카드 ID 저장\n      setFadingCards(boardCardIds);\n      \n      // 타이머 설정: 페이드아웃 효과 후 새 카드로 교체\n      setTimeout(() => {\n        // 사용된 카드 ID 추가\n        setUsedCardIds(prev => [...prev, ...boardCardIds]);\n        \n        // 새 라운드 시작\n        startNewRound();\n      }, 600);\n    } else {\n      // 유효한 조합이 있는 경우 - 점수 감점 및 가능한 조합 표시\n      setPlayerScore(prevScore => Math.max(0, prevScore - 5)); // 최소 0점까지만 감점\n      setToast({\n        isVisible: true,\n        type: 'error',\n        message: '가능한 조합이 있습니다! -5점'\n      });\n      \n      // 첫 번째 가능한 조합을 표시\n      setPossibleCombinations(validCombinations);\n      // 선택 초기화\n      setSelectedCards([]);\n      isProcessingRef.current = false;\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>TRIO</h1>\n      <div className=\"game-scores\">\n        <div className=\"player-score\">\n          플레이어: {playerScore}\n        </div>\n        <div className={`computer-score ${isComputerThinking ? 'thinking' : ''}`}>\n          컴퓨터: {computerScore} {isComputerThinking && '🤔'}\n        </div>\n      </div>\n      <div className=\"game-container\">\n        <GameBoard \n          board={board} \n          selectedCards={selectedCards}\n          computerSelectedCards={computerSelectedCards}\n          possibleCombinations={possibleCombinations}\n          fadingCards={fadingCards}\n          isComputerThinking={isComputerThinking}\n          onCardClick={handleCardSelect} \n        />\n        <div className=\"no-team-container\">\n          <button \n            className=\"no-team-btn\" \n            onClick={handleNoTeam}\n            disabled={isProcessingRef.current}\n          >\n            NO TEAM\n          </button>\n        </div>\n      </div>\n      <Toast toast={toast} setToast={setToast} />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}